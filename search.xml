<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>为何加载So时会发生死锁？</title>
      <link href="/2022/03/04/dead-lock-when-loading-so/"/>
      <url>/2022/03/04/dead-lock-when-loading-so/</url>
      
        <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>最近项目中遇到一个神奇的ANR问题，量级比较大，都是卡在同一个地方。</p><p>初看日志是主线程卡在了Webview加载So的地方。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span><span class="token class-name">MainThread</span><span class="token punctuation">]</span>ANR_EXCEPTION<span class="token operator">:</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Runtime</span><span class="token punctuation">.</span><span class="token function">loadLibrary0</span><span class="token punctuation">(</span><span class="token class-name">Unknown</span> <span class="token class-name">Source</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Runtime</span><span class="token punctuation">.</span><span class="token function">loadLibrary0</span><span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1008</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>System</span><span class="token punctuation">.</span><span class="token function">loadLibrary</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1665</span><span class="token punctuation">)</span>sl<span class="token punctuation">.</span><span class="token function">m</span><span class="token punctuation">(</span>chromium<span class="token operator">-</span><span class="token class-name">TrichromeWebView</span><span class="token punctuation">.</span>apk<span class="token operator">-</span>stable<span class="token operator">-</span><span class="token number">410310633</span><span class="token operator">:</span><span class="token number">15</span><span class="token punctuation">)</span>sl<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>chromium<span class="token operator">-</span><span class="token class-name">TrichromeWebView</span><span class="token punctuation">.</span>apk<span class="token operator">-</span>stable<span class="token operator">-</span><span class="token number">410310633</span><span class="token operator">:</span><span class="token number">11</span><span class="token punctuation">)</span>sl<span class="token punctuation">.</span><span class="token function">k</span><span class="token punctuation">(</span>chromium<span class="token operator">-</span><span class="token class-name">TrichromeWebView</span><span class="token punctuation">.</span>apk<span class="token operator">-</span>stable<span class="token operator">-</span><span class="token number">410310633</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>chromium<span class="token punctuation">.</span>android_webview<span class="token punctuation">.</span></span>AwBrowserProcess</span><span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>chromium<span class="token operator">-</span><span class="token class-name">TrichromeWebView</span><span class="token punctuation">.</span>apk<span class="token operator">-</span>stable<span class="token operator">-</span><span class="token number">410310633</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>webview<span class="token punctuation">.</span>chromium<span class="token punctuation">.</span></span>WebViewChromiumFactoryProvider</span><span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span>chromium<span class="token operator">-</span><span class="token class-name">TrichromeWebView</span><span class="token punctuation">.</span>apk<span class="token operator">-</span>stable<span class="token operator">-</span><span class="token number">410310633</span><span class="token operator">:</span><span class="token number">71</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>webview<span class="token punctuation">.</span>chromium<span class="token punctuation">.</span></span>WebViewChromiumFactoryProvider</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span>init<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>chromium<span class="token operator">-</span><span class="token class-name">TrichromeWebView</span><span class="token punctuation">.</span>apk<span class="token operator">-</span>stable<span class="token operator">-</span><span class="token number">410310633</span><span class="token operator">:</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>webview<span class="token punctuation">.</span>chromium<span class="token punctuation">.</span></span>WebViewChromiumFactoryProviderForR</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span>init<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>chromium<span class="token operator">-</span><span class="token class-name">TrichromeWebView</span><span class="token punctuation">.</span>apk<span class="token operator">-</span>stable<span class="token operator">-</span><span class="token number">410310633</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>webview<span class="token punctuation">.</span>chromium<span class="token punctuation">.</span></span>WebViewChromiumFactoryProviderForR</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>chromium<span class="token operator">-</span><span class="token class-name">TrichromeWebView</span><span class="token punctuation">.</span>apk<span class="token operator">-</span>stable<span class="token operator">-</span><span class="token number">410310633</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span>Method</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Native</span> <span class="token class-name">Method</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>webkit<span class="token punctuation">.</span></span>WebViewFactory</span><span class="token punctuation">.</span><span class="token function">getProvider</span><span class="token punctuation">(</span><span class="token class-name">WebViewFactory</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">266</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>webkit<span class="token punctuation">.</span></span>CookieManager</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token class-name">CookieManager</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>webkit<span class="token punctuation">.</span></span>CookieManager</span><span class="token punctuation">.</span><span class="token function">allowFileSchemeCookies</span><span class="token punctuation">(</span><span class="token class-name">CookieManager</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">259</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>为什么加载So会这么耗时？这个So有什么特殊的？莫非这个So加载超过了5秒？</p><p>查看此时运行的其他线程，发现同时被卡住的，不止webview一个So加载的地方，如下所示<br>端内几乎加载So的线程都卡住了。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span><span class="token class-name">Thread</span><span class="token operator">-</span><span class="token class-name">A</span><span class="token punctuation">]</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Runtime</span><span class="token punctuation">.</span><span class="token function">loadLibrary0</span><span class="token punctuation">(</span><span class="token class-name">Unknown</span> <span class="token class-name">Source</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Runtime</span><span class="token punctuation">.</span><span class="token function">loadLibrary0</span><span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1008</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>System</span><span class="token punctuation">.</span><span class="token function">loadLibrary</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1665</span><span class="token punctuation">)</span>yo0<span class="token punctuation">.</span>j<span class="token punctuation">.</span>ʿ<span class="token punctuation">(</span><span class="token class-name">SafelyLibraryLoader</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>yyy<span class="token punctuation">.</span>common<span class="token punctuation">.</span>soloader<span class="token punctuation">.</span></span>SoLoaderShim</span><span class="token punctuation">.</span><span class="token function">loadLibrary</span><span class="token punctuation">(</span><span class="token class-name">SoLoaderShim</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token class-name">Thread</span><span class="token operator">-</span><span class="token class-name">B</span><span class="token punctuation">]</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Runtime</span><span class="token punctuation">.</span><span class="token function">nativeLoad</span><span class="token punctuation">(</span><span class="token class-name">Native</span> <span class="token class-name">Method</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Runtime</span><span class="token punctuation">.</span><span class="token function">nativeLoad</span><span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1131</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Runtime</span><span class="token punctuation">.</span><span class="token function">loadLibrary0</span><span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1085</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Runtime</span><span class="token punctuation">.</span><span class="token function">loadLibrary0</span><span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1008</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>System</span><span class="token punctuation">.</span><span class="token function">loadLibrary</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1665</span><span class="token punctuation">)</span>xt0<span class="token punctuation">.</span>c<span class="token punctuation">.</span>ʻ<span class="token punctuation">(</span><span class="token class-name">LibLoadUtil</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">)</span>xt0<span class="token punctuation">.</span>c<span class="token punctuation">.</span>ʼ<span class="token punctuation">(</span><span class="token class-name">LibLoadUtil</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">)</span>wt0<span class="token punctuation">.</span>d<span class="token punctuation">.</span>ʼ<span class="token punctuation">(</span><span class="token class-name">StarTrailHelper</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token class-name">Thread</span><span class="token operator">-</span><span class="token class-name">C</span><span class="token punctuation">]</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Runtime</span><span class="token punctuation">.</span><span class="token function">loadLibrary0</span><span class="token punctuation">(</span><span class="token class-name">Unknown</span> <span class="token class-name">Source</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Runtime</span><span class="token punctuation">.</span><span class="token function">loadLibrary0</span><span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1008</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>System</span><span class="token punctuation">.</span><span class="token function">loadLibrary</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1665</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>yyy<span class="token punctuation">.</span>est<span class="token punctuation">.</span></span>E</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span>clinit<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Unknown</span> <span class="token class-name">Source</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>yyy<span class="token punctuation">.</span>est<span class="token punctuation">.</span></span>E</span><span class="token punctuation">.</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token class-name">Unknown</span> <span class="token class-name">Source</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>yyy<span class="token punctuation">.</span></span>T</span><span class="token punctuation">.</span><span class="token function">q</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看现象很像是发生了死锁，不过死锁发生的场景是两个线程相互等待对方持有的锁🔒。<br>排查主线程调用堆栈后，发现除了系统<code>Runtime.loadiLibrary0</code>方法加了锁，其他地方没有锁。</p><p><code>Runtime</code>本身是单例，<code>loadLirary0</code>方法是<strong>synchronized</strong>方法，要进入该方法，需要当前线程获取到<code>Runtime</code>对象的锁🔒。<br>查看整个<code>Runtime</code>类中，能竞争<code>Runtime</code>对象锁的，都是在加载So相关的逻辑</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">loadLibrary0</span><span class="token punctuation">(</span><span class="token class-name">ClassLoader</span> loader<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> callerClass<span class="token punctuation">,</span> <span class="token class-name">String</span> libname<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>loader <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>loader <span class="token keyword">instanceof</span> <span class="token class-name">BootClassLoader</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> filename <span class="token operator">=</span> loader<span class="token punctuation">.</span><span class="token function">findLibrary</span><span class="token punctuation">(</span>libraryName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>filename <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsatisfiedLinkError</span><span class="token punctuation">(</span>loader <span class="token operator">+</span> <span class="token string">" couldn't find \""</span> <span class="token operator">+</span>                                           <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">mapLibraryName</span><span class="token punctuation">(</span>libraryName<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">String</span> error <span class="token operator">=</span> <span class="token function">nativeLoad</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> loader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>error <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsatisfiedLinkError</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">getLibPaths</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> filename <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">mapLibraryName</span><span class="token punctuation">(</span>libraryName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> error <span class="token operator">=</span> <span class="token function">nativeLoad</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> loader<span class="token punctuation">,</span> callerClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>error <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsatisfiedLinkError</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="排查过程"><a href="#排查过程" class="headerlink" title="排查过程"></a>排查过程</h4><p>所以问题变成了，是谁持有了<code>Runtime</code>加载So的对象锁🔒，并且长时间没有释放。</p><p>通过分析所有被卡在加载So处的线程，发现线程<strong>Thread B</strong>嫌疑重大</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span><span class="token class-name">Thread</span> <span class="token class-name">B</span><span class="token punctuation">]</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Runtime</span><span class="token punctuation">.</span><span class="token function">nativeLoad</span><span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1131</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Runtime</span><span class="token punctuation">.</span><span class="token function">loadLibrary0</span><span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1085</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Runtime</span><span class="token punctuation">.</span><span class="token function">loadLibrary0</span><span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1008</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>System</span><span class="token punctuation">.</span><span class="token function">loadLibrary</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1665</span><span class="token punctuation">)</span>xt0<span class="token punctuation">.</span>c<span class="token punctuation">.</span>ʻ<span class="token punctuation">(</span><span class="token class-name">LibLoadUtil</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">)</span>xt0<span class="token punctuation">.</span>c<span class="token punctuation">.</span>ʼ<span class="token punctuation">(</span><span class="token class-name">LibLoadUtil</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">)</span>wt0<span class="token punctuation">.</span>d<span class="token punctuation">.</span>ʼ<span class="token punctuation">(</span><span class="token class-name">XXXXHelper</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只有它成功获取到了<code>Runtime</code>加载So的锁，并进入了native方法开始加载So。</p><p>看堆栈信息，线程<strong>Thread B</strong>是正在加载So，而其他线程还在等待<strong>Thread B</strong>加载So成功后重新竞争<code>Runtime</code>的对象锁🔒。</p><p>但是为什么<strong>Thread B</strong>也被阻塞住，没有完成So的加载，它在等什么？</p><p>有没有可能是这个So在<code>JNI_OnLoad</code>方法里执行了什么耗时操作？</p><p>通过联系<strong>Thread B</strong>加载So的维护团队，对方表示，<code>JNI_OnLoad</code>内没有耗时操作，只是一些常规的<code>JNI</code>方法注册和初始化工作。</p><p>然而诡异的是这个Sdk已经上线了好几个版本，最近没有更新。通过反编译Apk，比对So的md5，发现确实没有变化。</p><p>线索到这里又中断了，没有了头绪。</p><ul><li>猜想A</li></ul><p>如果<code>JNI_Onload</code>里反射调用了其他的类，而在这个类的<code>static</code>块中又触发了新的So加载，会不会死锁？</p><p>答案是不会。</p><p>因为即是在<code>JNI_Onload</code>里触发了新的So加载，也是在当前线程，<strong>synchronize</strong>锁是可重入锁，当前线程已经持有了<code>Runtime</code>对象的锁，<br>再次进入<code>Runtime.loadLibrary0</code>方法无需再与其他线程竞争，所以不会发生死锁。</p><p>跟So的维护团队也确认，在<code>JNI_Onload</code>里不会触发新的So加载。</p><ul><li>猜想B</li></ul><p>既然<code>JNI_Onload</code>里不会加载So，那会初始化其他类吗？<br>类初始化也是有锁的，虚拟机为了保证每个类只被初始化一次，在类初始化时会加锁。</p><p>如果</p><ol><li>线程<strong>Thread C</strong>正在初始化类<strong>ClassA</strong>，恰好<strong>ClassA</strong>的<strong>static</strong>块中触发了So的加载</li><li>线程<strong>Thread B</strong>的<code>JNI_Onload</code>方法里触发了<strong>ClassA</strong>的类初始化</li></ol><p>此时，线程<strong>Thread C</strong>持有虚拟机的类加载锁，等待<code>Runtime</code>的对象锁；线程<strong>Thread B</strong>持有<code>Runtime</code>的<strong>对象锁</strong>，等待虚拟机的<strong>类加载锁</strong>，便发生了死锁。</p><p>感觉看到了一丝希望。</p><p>再回头分析ANR的堆栈信息，发现<strong>Thread C</strong>确实正处于类初始化的阶段，并且也正被阻塞在So的加载。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span><span class="token class-name">Thread</span><span class="token operator">-</span><span class="token class-name">C</span><span class="token punctuation">]</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Runtime</span><span class="token punctuation">.</span><span class="token function">loadLibrary0</span><span class="token punctuation">(</span><span class="token class-name">Unknown</span> <span class="token class-name">Source</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Runtime</span><span class="token punctuation">.</span><span class="token function">loadLibrary0</span><span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1008</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>System</span><span class="token punctuation">.</span><span class="token function">loadLibrary</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1665</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token operator">*</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>yyy<span class="token punctuation">.</span>est<span class="token punctuation">.</span></span>E</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span>clinit<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Unknown</span> <span class="token class-name">Source</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token operator">*</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>yyy<span class="token punctuation">.</span>est<span class="token punctuation">.</span></span>E</span><span class="token punctuation">.</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token class-name">Unknown</span> <span class="token class-name">Source</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>yyy<span class="token punctuation">.</span></span>T</span><span class="token punctuation">.</span><span class="token function">q</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>高亮的第四行，**com.xxx.yyy.est.E.<clinit>(Unknown Source:2)**，说明正在进行类的初始化。</clinit></p><p>种种迹象表明，很有可能是发生了<strong>猜想B</strong>的情况。</p><p>即线程<strong>Thread B</strong>与<strong>Thread C</strong>发生了死锁，同时由于<code>Runtime</code>加载So的锁被<strong>Thread B</strong>持有，导致包括主现场在内的端内所有加载So的线程都被阻塞，<br>进而导致了ANR。</p><h4 id="水落石出"><a href="#水落石出" class="headerlink" title="水落石出"></a>水落石出</h4><p>由于这个问题量级比较大，经过与厂商的沟通，拿到了线上一些日志。</p><pre class="line-numbers language-log" data-language="log"><code class="language-log">Thread B    <span class="token operator">#</span><span class="token number">00</span> pc <span class="token number">000000000006cbbc</span>  <span class="token file-path string">/apex/com.android.runtime/lib64/bionic/libc.so</span> <span class="token operator">(</span>syscall<span class="token operator">+</span><span class="token number">28</span><span class="token operator">)</span> <span class="token operator">(</span>BuildId<span class="token operator">:</span> <span class="token hash constant">b91c775ccc9b0556e91bc575a2511cd0</span><span class="token operator">)</span>    <span class="token operator">#</span><span class="token number">01</span> pc <span class="token number">000000000015c2a0</span>  <span class="token file-path string">/apex/com.android.runtime/lib64/libart.so</span> <span class="token operator">(</span>art<span class="token operator">:</span><span class="token operator">:</span>ConditionVariable<span class="token operator">:</span><span class="token operator">:</span>WaitHoldingLocks<span class="token operator">(</span>art<span class="token operator">:</span><span class="token operator">:</span>Thread<span class="token operator">*</span><span class="token operator">)</span><span class="token operator">+</span><span class="token number">156</span><span class="token operator">)</span> <span class="token operator">(</span>BuildId<span class="token operator">:</span> <span class="token hash constant">08543716770b195bd10fafbe11bb5052</span><span class="token operator">)</span>    <span class="token operator">#</span><span class="token number">02</span> pc <span class="token number">00000000004292e4</span>  <span class="token file-path string">/apex/com.android.runtime/lib64/libart.so</span> <span class="token operator">(</span>art<span class="token operator">:</span><span class="token operator">:</span>Monitor<span class="token operator">:</span><span class="token operator">:</span>Wait<span class="token operator">(</span>art<span class="token operator">:</span><span class="token operator">:</span>Thread<span class="token operator">*</span><span class="token punctuation">,</span> long<span class="token punctuation">,</span> int<span class="token punctuation">,</span> bool<span class="token punctuation">,</span> art<span class="token operator">:</span><span class="token operator">:</span>ThreadState<span class="token operator">)</span><span class="token operator">+</span><span class="token number">660</span><span class="token operator">)</span> <span class="token operator">(</span>BuildId<span class="token operator">:</span> <span class="token hash constant">08543716770b195bd10fafbe11bb5052</span><span class="token operator">)</span>    <span class="token operator">#</span><span class="token number">03</span> pc <span class="token number">000000000042af90</span>  <span class="token file-path string">/apex/com.android.runtime/lib64/libart.so</span> <span class="token operator">(</span>art<span class="token operator">:</span><span class="token operator">:</span>Monitor<span class="token operator">:</span><span class="token operator">:</span>Wait<span class="token operator">(</span>art<span class="token operator">:</span><span class="token operator">:</span>Thread<span class="token operator">*</span><span class="token punctuation">,</span> art<span class="token operator">:</span><span class="token operator">:</span>ObjPtr<span class="token operator">&lt;</span>art<span class="token operator">:</span><span class="token operator">:</span>mirror<span class="token operator">:</span><span class="token operator">:</span>Object<span class="token operator">&gt;</span><span class="token punctuation">,</span> long<span class="token punctuation">,</span> int<span class="token punctuation">,</span> bool<span class="token punctuation">,</span> art<span class="token operator">:</span><span class="token operator">:</span>ThreadState<span class="token operator">)</span><span class="token operator">+</span><span class="token number">284</span><span class="token operator">)</span> <span class="token operator">(</span>BuildId<span class="token operator">:</span> <span class="token hash constant">08543716770b195bd10fafbe11bb5052</span><span class="token operator">)</span>    <span class="token operator">#</span><span class="token number">04</span> pc <span class="token number">0000000000184ef0</span>  <span class="token file-path string">/apex/com.android.runtime/lib64/libart.so</span> <span class="token operator">(</span>art<span class="token operator">:</span><span class="token operator">:</span>ClassLinker<span class="token operator">:</span><span class="token operator">:</span>WaitForInitializeClass<span class="token operator">(</span>art<span class="token operator">:</span><span class="token operator">:</span>Handle<span class="token operator">&lt;</span>art<span class="token operator">:</span><span class="token operator">:</span>mirror<span class="token operator">:</span><span class="token operator">:</span>Class<span class="token operator">&gt;</span><span class="token punctuation">,</span> art<span class="token operator">:</span><span class="token operator">:</span>Thread<span class="token operator">*</span><span class="token punctuation">,</span> art<span class="token operator">:</span><span class="token operator">:</span>ObjectLock<span class="token operator">&lt;</span>art<span class="token operator">:</span><span class="token operator">:</span>mirror<span class="token operator">:</span><span class="token operator">:</span>Class<span class="token operator">&gt;</span><span class="token operator">&amp;</span><span class="token operator">)</span><span class="token operator">+</span><span class="token number">160</span><span class="token operator">)</span> <span class="token operator">(</span>BuildId<span class="token operator">:</span> <span class="token hash constant">08543716770b195bd10fafbe11bb5052</span><span class="token operator">)</span>    <span class="token operator">#</span><span class="token number">05</span> pc <span class="token number">00000000001840bc</span>  <span class="token file-path string">/apex/com.android.runtime/lib64/libart.so</span> <span class="token operator">(</span>art<span class="token operator">:</span><span class="token operator">:</span>ClassLinker<span class="token operator">:</span><span class="token operator">:</span>InitializeClass<span class="token operator">(</span>art<span class="token operator">:</span><span class="token operator">:</span>Thread<span class="token operator">*</span><span class="token punctuation">,</span> art<span class="token operator">:</span><span class="token operator">:</span>Handle<span class="token operator">&lt;</span>art<span class="token operator">:</span><span class="token operator">:</span>mirror<span class="token operator">:</span><span class="token operator">:</span>Class<span class="token operator">&gt;</span><span class="token punctuation">,</span> bool<span class="token punctuation">,</span> bool<span class="token operator">)</span><span class="token operator">+</span><span class="token number">2552</span><span class="token operator">)</span> <span class="token operator">(</span>BuildId<span class="token operator">:</span> <span class="token hash constant">08543716770b195bd10fafbe11bb5052</span><span class="token operator">)</span>    <span class="token operator">#</span><span class="token number">06</span> pc <span class="token number">000000000016e9a4</span>  <span class="token file-path string">/apex/com.android.runtime/lib64/libart.so</span> <span class="token operator">(</span>art<span class="token operator">:</span><span class="token operator">:</span>ClassLinker<span class="token operator">:</span><span class="token operator">:</span>EnsureInitialized<span class="token operator">(</span>art<span class="token operator">:</span><span class="token operator">:</span>Thread<span class="token operator">*</span><span class="token punctuation">,</span> art<span class="token operator">:</span><span class="token operator">:</span>Handle<span class="token operator">&lt;</span>art<span class="token operator">:</span><span class="token operator">:</span>mirror<span class="token operator">:</span><span class="token operator">:</span>Class<span class="token operator">&gt;</span><span class="token punctuation">,</span> bool<span class="token punctuation">,</span> bool<span class="token operator">)</span><span class="token operator">+</span><span class="token number">92</span><span class="token operator">)</span> <span class="token operator">(</span>BuildId<span class="token operator">:</span> <span class="token hash constant">08543716770b195bd10fafbe11bb5052</span><span class="token operator">)</span>    <span class="token operator">#</span><span class="token number">07</span> pc <span class="token number">00000000003fc280</span>  <span class="token file-path string">/apex/com.android.runtime/lib64/libart.so</span> <span class="token operator">(</span>art<span class="token operator">:</span><span class="token operator">:</span>FindMethodID<span class="token operator">(</span>art<span class="token operator">:</span><span class="token operator">:</span>ScopedObjectAccess<span class="token operator">&amp;</span><span class="token punctuation">,</span> _jclass<span class="token operator">*</span><span class="token punctuation">,</span> char const<span class="token operator">*</span><span class="token punctuation">,</span> char const<span class="token operator">*</span><span class="token punctuation">,</span> bool<span class="token operator">)</span><span class="token operator">+</span><span class="token number">548</span><span class="token operator">)</span> <span class="token operator">(</span>BuildId<span class="token operator">:</span> <span class="token hash constant">08543716770b195bd10fafbe11bb5052</span><span class="token operator">)</span>    <span class="token operator">#</span><span class="token number">08</span> pc <span class="token number">00000000003ca048</span>  <span class="token file-path string">/apex/com.android.runtime/lib64/libart.so</span> <span class="token operator">(</span>art<span class="token operator">:</span><span class="token operator">:</span>JNI<span class="token operator">:</span><span class="token operator">:</span>GetStaticMethodID<span class="token operator">(</span>_JNIEnv<span class="token operator">*</span><span class="token punctuation">,</span> _jclass<span class="token operator">*</span><span class="token punctuation">,</span> char const<span class="token operator">*</span><span class="token punctuation">,</span> char const<span class="token operator">*</span><span class="token operator">)</span><span class="token operator">+</span><span class="token number">680</span><span class="token operator">)</span> <span class="token operator">(</span>BuildId<span class="token operator">:</span> <span class="token hash constant">08543716770b195bd10fafbe11bb5052</span><span class="token operator">)</span>    <span class="token operator">#</span><span class="token number">09</span> pc <span class="token number">00000000000136f4</span>  <span class="token file-path string">/data/app/com.xxx.yyys-0FVA4L2VSdb5GXWYPpaZFA==/lib/arm64/libest.so</span> <span class="token operator">(</span>entry_est<span class="token operator">+</span><span class="token number">1284</span><span class="token operator">)</span> <span class="token operator">(</span>BuildId<span class="token operator">:</span> feb2c1dcd5b5117d0e451dacb4be53ceb1a3c5fe<span class="token operator">)</span>    <span class="token operator">#</span><span class="token number">10</span> pc <span class="token number">000000000000dffc</span>  <span class="token file-path string">/data/app/com.xxx.yyys-0FVA4L2VSdb5GXWYPpaZFA==/lib/arm64/libest.so</span> <span class="token operator">(</span>JNI_OnLoad<span class="token operator">+</span><span class="token number">160</span><span class="token operator">)</span> <span class="token operator">(</span>BuildId<span class="token operator">:</span> feb2c1dcd5b5117d0e451dacb4be53ceb1a3c5fe<span class="token operator">)</span>    <span class="token operator">#</span><span class="token number">11</span> pc <span class="token number">000000000039726c</span>  <span class="token file-path string">/apex/com.android.runtime/lib64/libart.so</span> <span class="token operator">(</span>art<span class="token operator">:</span><span class="token operator">:</span>JavaVMExt<span class="token operator">:</span><span class="token operator">:</span>LoadNativeLibrary<span class="token operator">(</span>_JNIEnv<span class="token operator">*</span><span class="token punctuation">,</span> std<span class="token operator">:</span><span class="token operator">:</span>__1<span class="token operator">:</span><span class="token operator">:</span>basic_string<span class="token operator">&lt;</span>char<span class="token punctuation">,</span> std<span class="token operator">:</span><span class="token operator">:</span>__1<span class="token operator">:</span><span class="token operator">:</span>char_traits<span class="token operator">&lt;</span>char<span class="token operator">&gt;</span><span class="token punctuation">,</span> std<span class="token operator">:</span><span class="token operator">:</span>__1<span class="token operator">:</span><span class="token operator">:</span>allocator<span class="token operator">&lt;</span>char<span class="token operator">&gt;</span><span class="token operator">&gt;</span> const<span class="token operator">&amp;</span><span class="token punctuation">,</span> _jobject<span class="token operator">*</span><span class="token punctuation">,</span> _jclass<span class="token operator">*</span><span class="token punctuation">,</span> std<span class="token operator">:</span><span class="token operator">:</span>__1<span class="token operator">:</span><span class="token operator">:</span>basic_string<span class="token operator">&lt;</span>char<span class="token punctuation">,</span> std<span class="token operator">:</span><span class="token operator">:</span>__1<span class="token operator">:</span><span class="token operator">:</span>char_traits<span class="token operator">&lt;</span>char<span class="token operator">&gt;</span><span class="token punctuation">,</span> std<span class="token operator">:</span><span class="token operator">:</span>__1<span class="token operator">:</span><span class="token operator">:</span>allocator<span class="token operator">&lt;</span>char<span class="token operator">&gt;</span><span class="token operator">&gt;</span><span class="token operator">*</span><span class="token operator">)</span><span class="token operator">+</span><span class="token number">3412</span><span class="token operator">)</span> <span class="token operator">(</span>BuildId<span class="token operator">:</span> <span class="token hash constant">08543716770b195bd10fafbe11bb5052</span><span class="token operator">)</span>    <span class="token operator">#</span><span class="token number">12</span> pc <span class="token number">0000000000005174</span>  <span class="token file-path string">/apex/com.android.runtime/lib64/libopenjdkjvm.so</span> <span class="token operator">(</span>JVM_NativeLoad<span class="token operator">+</span><span class="token number">552</span><span class="token operator">)</span> <span class="token operator">(</span>BuildId<span class="token operator">:</span> <span class="token hash constant">32291dbf2a17e91f03e5b077fb50c9fe</span><span class="token operator">)</span>    <span class="token operator">#</span><span class="token number">13</span> pc <span class="token number">00000000000efaf4</span>  <span class="token file-path string">/system/framework/arm64/boot.oat</span> <span class="token operator">(</span>art_jni_trampoline<span class="token operator">+</span><span class="token number">228</span><span class="token operator">)</span> <span class="token operator">(</span>BuildId<span class="token operator">:</span> <span class="token number">8fb9eb57b3ea725573d56f165d17f78dd54965d7</span><span class="token operator">)</span>    <span class="token operator">#</span><span class="token number">14</span> pc <span class="token number">0000000000110a5c</span>  <span class="token file-path string">/system/framework/arm64/boot.oat</span> <span class="token operator">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span>loadLibrary0<span class="token operator">+</span><span class="token number">236</span><span class="token operator">)</span> <span class="token operator">(</span>BuildId<span class="token operator">:</span> <span class="token number">8fb9eb57b3ea725573d56f165d17f78dd54965d7</span><span class="token operator">)</span>    <span class="token operator">#</span><span class="token number">15</span> pc <span class="token number">0000000000112164</span>  <span class="token file-path string">/system/framework/arm64/boot.oat</span> <span class="token operator">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span>loadLibrary0<span class="token operator">+</span><span class="token number">180</span><span class="token operator">)</span> <span class="token operator">(</span>BuildId<span class="token operator">:</span> <span class="token number">8fb9eb57b3ea725573d56f165d17f78dd54965d7</span><span class="token operator">)</span>    <span class="token operator">#</span><span class="token number">16</span> pc <span class="token number">0000000000117b20</span>  <span class="token file-path string">/system/framework/arm64/boot.oat</span> <span class="token operator">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>System<span class="token punctuation">.</span>loadLibrary<span class="token operator">+</span><span class="token number">96</span><span class="token operator">)</span> <span class="token operator">(</span>BuildId<span class="token operator">:</span> <span class="token number">8fb9eb57b3ea725573d56f165d17f78dd54965d7</span><span class="token operator">)</span>    <span class="token operator">#</span><span class="token number">17</span> pc <span class="token number">00000000016f1fc4</span>  <span class="token file-path string">/data/app/com.xxx.yyys-0FVA4L2VSdb5GXWYPpaZFA==/oat/arm64/base.odex</span> <span class="token operator">(</span>or0<span class="token punctuation">.</span>c<span class="token punctuation">.</span>ʻ<span class="token operator">+</span><span class="token number">116</span><span class="token operator">)</span>Thread C    <span class="token operator">#</span><span class="token number">00</span> pc <span class="token number">000000000006cbbc</span>  <span class="token file-path string">/apex/com.android.runtime/lib64/bionic/libc.so</span> <span class="token operator">(</span>syscall<span class="token operator">+</span><span class="token number">28</span><span class="token operator">)</span> <span class="token operator">(</span>BuildId<span class="token operator">:</span> <span class="token hash constant">b91c775ccc9b0556e91bc575a2511cd0</span><span class="token operator">)</span>    <span class="token operator">#</span><span class="token number">01</span> pc <span class="token number">000000000015c2a0</span>  <span class="token file-path string">/apex/com.android.runtime/lib64/libart.so</span> <span class="token operator">(</span>art<span class="token operator">:</span><span class="token operator">:</span>ConditionVariable<span class="token operator">:</span><span class="token operator">:</span>WaitHoldingLocks<span class="token operator">(</span>art<span class="token operator">:</span><span class="token operator">:</span>Thread<span class="token operator">*</span><span class="token operator">)</span><span class="token operator">+</span><span class="token number">156</span><span class="token operator">)</span> <span class="token operator">(</span>BuildId<span class="token operator">:</span> <span class="token hash constant">691979e9d66dfedf3fd32d27da323a02</span><span class="token operator">)</span>    <span class="token operator">#</span><span class="token number">02</span> pc <span class="token number">000000000015dfb8</span>  <span class="token file-path string">/apex/com.android.runtime/lib64/libart.so</span> <span class="token operator">(</span>art<span class="token operator">:</span><span class="token operator">:</span>PiConditionVariable<span class="token operator">:</span><span class="token operator">:</span>WaitHoldingLocks<span class="token operator">(</span>art<span class="token operator">:</span><span class="token operator">:</span>Thread<span class="token operator">*</span><span class="token operator">)</span><span class="token operator">+</span><span class="token number">260</span><span class="token operator">)</span> <span class="token operator">(</span>BuildId<span class="token operator">:</span> <span class="token hash constant">691979e9d66dfedf3fd32d27da323a02</span><span class="token operator">)</span>    <span class="token operator">#</span><span class="token number">03</span> pc <span class="token number">0000000000424f44</span>  <span class="token file-path string">/apex/com.android.runtime/lib64/libart.so</span> <span class="token operator">(</span>_ZN3art7Monitor4LockILNS_10LockReasonE1EEEvPNS_6ThreadE<span class="token operator">+</span><span class="token number">1928</span><span class="token operator">)</span> <span class="token operator">(</span>BuildId<span class="token operator">:</span> <span class="token hash constant">691979e9d66dfedf3fd32d27da323a02</span><span class="token operator">)</span>    <span class="token operator">#</span><span class="token number">04</span> pc <span class="token number">000000000042aaf0</span>  <span class="token file-path string">/apex/com.android.runtime/lib64/libart.so</span> <span class="token operator">(</span>art<span class="token operator">:</span><span class="token operator">:</span>Monitor<span class="token operator">:</span><span class="token operator">:</span>MonitorEnter<span class="token operator">(</span>art<span class="token operator">:</span><span class="token operator">:</span>Thread<span class="token operator">*</span><span class="token punctuation">,</span> art<span class="token operator">:</span><span class="token operator">:</span>ObjPtr<span class="token operator">&lt;</span>art<span class="token operator">:</span><span class="token operator">:</span>mirror<span class="token operator">:</span><span class="token operator">:</span>Object<span class="token operator">&gt;</span><span class="token punctuation">,</span> bool<span class="token operator">)</span><span class="token operator">+</span><span class="token number">976</span><span class="token operator">)</span> <span class="token operator">(</span>BuildId<span class="token operator">:</span> <span class="token hash constant">691979e9d66dfedf3fd32d27da323a02</span><span class="token operator">)</span>    <span class="token operator">#</span><span class="token number">05</span> pc <span class="token number">00000000005bb010</span>  <span class="token file-path string">/apex/com.android.runtime/lib64/libart.so</span> <span class="token operator">(</span>artLockObjectFromCode<span class="token operator">+</span><span class="token number">32</span><span class="token operator">)</span> <span class="token operator">(</span>BuildId<span class="token operator">:</span> <span class="token hash constant">691979e9d66dfedf3fd32d27da323a02</span><span class="token operator">)</span>    <span class="token operator">#</span><span class="token number">06</span> pc <span class="token number">00000000001477e4</span>  <span class="token file-path string">/apex/com.android.runtime/lib64/libart.so</span> <span class="token operator">(</span>art_quick_lock_object_no_inline<span class="token operator">+</span><span class="token number">52</span><span class="token operator">)</span> <span class="token operator">(</span>BuildId<span class="token operator">:</span> <span class="token hash constant">691979e9d66dfedf3fd32d27da323a02</span><span class="token operator">)</span>    <span class="token operator">#</span><span class="token number">07</span> pc <span class="token number">00000000001109bc</span>  <span class="token file-path string">/system/framework/arm64/boot.oat</span> <span class="token operator">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span>loadLibrary0<span class="token operator">+</span><span class="token number">76</span><span class="token operator">)</span> <span class="token operator">(</span>BuildId<span class="token operator">:</span> c6616f9f679ad7292beda02de1246df662f7f266<span class="token operator">)</span>    <span class="token operator">#</span><span class="token number">08</span> pc <span class="token number">0000000000112164</span>  <span class="token file-path string">/system/framework/arm64/boot.oat</span> <span class="token operator">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span>loadLibrary0<span class="token operator">+</span><span class="token number">180</span><span class="token operator">)</span> <span class="token operator">(</span>BuildId<span class="token operator">:</span> c6616f9f679ad7292beda02de1246df662f7f266<span class="token operator">)</span>    <span class="token operator">#</span><span class="token number">09</span> pc <span class="token number">0000000000117b20</span>  <span class="token file-path string">/system/framework/arm64/boot.oat</span> <span class="token operator">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>System<span class="token punctuation">.</span>loadLibrary<span class="token operator">+</span><span class="token number">96</span><span class="token operator">)</span> <span class="token operator">(</span>BuildId<span class="token operator">:</span> c6616f9f679ad7292beda02de1246df662f7f266<span class="token operator">)</span>    <span class="token operator">#</span><span class="token number">10</span> pc <span class="token number">00000000001475b8</span>  <span class="token file-path string">/apex/com.android.runtime/lib64/libart.so</span> <span class="token operator">(</span>art_quick_invoke_static_stub<span class="token operator">+</span><span class="token number">568</span><span class="token operator">)</span> <span class="token operator">(</span>BuildId<span class="token operator">:</span> <span class="token hash constant">691979e9d66dfedf3fd32d27da323a02</span><span class="token operator">)</span>    <span class="token operator">#</span><span class="token number">11</span> pc <span class="token number">00000000001561d4</span>  <span class="token file-path string">/apex/com.android.runtime/lib64/libart.so</span> <span class="token operator">(</span>art<span class="token operator">:</span><span class="token operator">:</span>ArtMethod<span class="token operator">:</span><span class="token operator">:</span>Invoke<span class="token operator">(</span>art<span class="token operator">:</span><span class="token operator">:</span>Thread<span class="token operator">*</span><span class="token punctuation">,</span> unsigned int<span class="token operator">*</span><span class="token punctuation">,</span> unsigned int<span class="token punctuation">,</span> art<span class="token operator">:</span><span class="token operator">:</span>JValue<span class="token operator">*</span><span class="token punctuation">,</span> char const<span class="token operator">*</span><span class="token operator">)</span><span class="token operator">+</span><span class="token number">284</span><span class="token operator">)</span> <span class="token operator">(</span>BuildId<span class="token operator">:</span> <span class="token hash constant">691979e9d66dfedf3fd32d27da323a02</span><span class="token operator">)</span>    <span class="token operator">#</span><span class="token number">12</span> pc <span class="token number">00000000002fd900</span>  <span class="token file-path string">/apex/com.android.runtime/lib64/libart.so</span> <span class="token operator">(</span>art<span class="token operator">:</span><span class="token operator">:</span>interpreter<span class="token operator">:</span><span class="token operator">:</span>ArtInterpreterToCompiledCodeBridge<span class="token operator">(</span>art<span class="token operator">:</span><span class="token operator">:</span>Thread<span class="token operator">*</span><span class="token punctuation">,</span> art<span class="token operator">:</span><span class="token operator">:</span>ArtMethod<span class="token operator">*</span><span class="token punctuation">,</span> art<span class="token operator">:</span><span class="token operator">:</span>ShadowFrame<span class="token operator">*</span><span class="token punctuation">,</span> unsigned short<span class="token punctuation">,</span> art<span class="token operator">:</span><span class="token operator">:</span>JValue<span class="token operator">*</span><span class="token operator">)</span><span class="token operator">+</span><span class="token number">384</span><span class="token operator">)</span> <span class="token operator">(</span>BuildId<span class="token operator">:</span> <span class="token hash constant">691979e9d66dfedf3fd32d27da323a02</span><span class="token operator">)</span>    <span class="token operator">#</span><span class="token number">13</span> pc <span class="token number">00000000002f8bd0</span>  <span class="token file-path string">/apex/com.android.runtime/lib64/libart.so</span> <span class="token operator">(</span>bool art<span class="token operator">:</span><span class="token operator">:</span>interpreter<span class="token operator">:</span><span class="token operator">:</span>DoCall<span class="token operator">&lt;</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token operator">&gt;</span><span class="token operator">(</span>art<span class="token operator">:</span><span class="token operator">:</span>ArtMethod<span class="token operator">*</span><span class="token punctuation">,</span> art<span class="token operator">:</span><span class="token operator">:</span>Thread<span class="token operator">*</span><span class="token punctuation">,</span> art<span class="token operator">:</span><span class="token operator">:</span>ShadowFrame<span class="token operator">&amp;</span><span class="token punctuation">,</span> art<span class="token operator">:</span><span class="token operator">:</span>Instruction const<span class="token operator">*</span><span class="token punctuation">,</span> unsigned short<span class="token punctuation">,</span> art<span class="token operator">:</span><span class="token operator">:</span>JValue<span class="token operator">*</span><span class="token operator">)</span><span class="token operator">+</span><span class="token number">912</span><span class="token operator">)</span> <span class="token operator">(</span>BuildId<span class="token operator">:</span> <span class="token hash constant">691979e9d66dfedf3fd32d27da323a02</span><span class="token operator">)</span>    <span class="token operator">#</span><span class="token number">14</span> pc <span class="token number">00000000005ce108</span>  <span class="token file-path string">/apex/com.android.runtime/lib64/libart.so</span> <span class="token operator">(</span>MterpInvokeStatic<span class="token operator">+</span><span class="token number">368</span><span class="token operator">)</span> <span class="token operator">(</span>BuildId<span class="token operator">:</span> <span class="token hash constant">691979e9d66dfedf3fd32d27da323a02</span><span class="token operator">)</span>    <span class="token operator">#</span><span class="token number">15</span> pc <span class="token number">0000000000141994</span>  <span class="token file-path string">/apex/com.android.runtime/lib64/libart.so</span> <span class="token operator">(</span>mterp_op_invoke_static<span class="token operator">+</span><span class="token number">20</span><span class="token operator">)</span> <span class="token operator">(</span>BuildId<span class="token operator">:</span> <span class="token hash constant">691979e9d66dfedf3fd32d27da323a02</span><span class="token operator">)</span>    <span class="token operator">#</span><span class="token number">16</span> pc <span class="token number">00000000020f1494</span>  <span class="token file-path string">/data/app/com.xxx.yyy-O_XmVEkRKPw5wrtfpQ3R2w==/oat/arm64/base.vdex</span> <span class="token operator">(</span>com<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>yyy<span class="token punctuation">.</span>est<span class="token punctuation">.</span>E<span class="token punctuation">.</span><span class="token operator">&lt;</span>clinit<span class="token operator">&gt;</span><span class="token operator">+</span><span class="token number">4</span><span class="token operator">)</span>    <span class="token operator">#</span><span class="token number">17</span> pc <span class="token number">00000000002ce22c</span>  <span class="token file-path string">/apex/com.android.runtime/lib64/libart.so</span> <span class="token operator">(</span>_ZN3art11interpreterL7ExecuteEPNS_6ThreadERKNS_20CodeItemDataAccessorERNS_11ShadowFrameENS_6JValueEbb<span class="token punctuation">.</span>llvm<span class="token punctuation">.</span>10887373532384510885<span class="token operator">+</span><span class="token number">320</span><span class="token operator">)</span> <span class="token operator">(</span>BuildId<span class="token operator">:</span> <span class="token hash constant">691979e9d66dfedf3fd32d27da323a02</span><span class="token operator">)</span>    <span class="token operator">#</span><span class="token number">18</span> pc <span class="token number">00000000005bc090</span>  <span class="token file-path string">/apex/com.android.runtime/lib64/libart.so</span> <span class="token operator">(</span>artQuickToInterpreterBridge<span class="token operator">+</span><span class="token number">1012</span><span class="token operator">)</span> <span class="token operator">(</span>BuildId<span class="token operator">:</span> <span class="token hash constant">691979e9d66dfedf3fd32d27da323a02</span><span class="token operator">)</span>    <span class="token operator">#</span><span class="token number">19</span> pc <span class="token number">0000000000150468</span>  <span class="token file-path string">/apex/com.android.runtime/lib64/libart.so</span> <span class="token operator">(</span>art_quick_to_interpreter_bridge<span class="token operator">+</span><span class="token number">88</span><span class="token operator">)</span> <span class="token operator">(</span>BuildId<span class="token operator">:</span> <span class="token hash constant">691979e9d66dfedf3fd32d27da323a02</span><span class="token operator">)</span>    <span class="token operator">#</span><span class="token number">20</span> pc <span class="token number">00000000001475b8</span>  <span class="token file-path string">/apex/com.android.runtime/lib64/libart.so</span> <span class="token operator">(</span>art_quick_invoke_static_stub<span class="token operator">+</span><span class="token number">568</span><span class="token operator">)</span> <span class="token operator">(</span>BuildId<span class="token operator">:</span> <span class="token hash constant">691979e9d66dfedf3fd32d27da323a02</span><span class="token operator">)</span>    <span class="token operator">#</span><span class="token number">21</span> pc <span class="token number">00000000001561d4</span>  <span class="token file-path string">/apex/com.android.runtime/lib64/libart.so</span> <span class="token operator">(</span>art<span class="token operator">:</span><span class="token operator">:</span>ArtMethod<span class="token operator">:</span><span class="token operator">:</span>Invoke<span class="token operator">(</span>art<span class="token operator">:</span><span class="token operator">:</span>Thread<span class="token operator">*</span><span class="token punctuation">,</span> unsigned int<span class="token operator">*</span><span class="token punctuation">,</span> unsigned int<span class="token punctuation">,</span> art<span class="token operator">:</span><span class="token operator">:</span>JValue<span class="token operator">*</span><span class="token punctuation">,</span> char const<span class="token operator">*</span><span class="token operator">)</span><span class="token operator">+</span><span class="token number">284</span><span class="token operator">)</span> <span class="token operator">(</span>BuildId<span class="token operator">:</span> <span class="token hash constant">691979e9d66dfedf3fd32d27da323a02</span><span class="token operator">)</span>    <span class="token operator">#</span><span class="token number">22</span> pc <span class="token number">0000000000183e70</span>  <span class="token file-path string">/apex/com.android.runtime/lib64/libart.so</span> <span class="token operator">(</span>art<span class="token operator">:</span><span class="token operator">:</span>ClassLinker<span class="token operator">:</span><span class="token operator">:</span>InitializeClass<span class="token operator">(</span>art<span class="token operator">:</span><span class="token operator">:</span>Thread<span class="token operator">*</span><span class="token punctuation">,</span> art<span class="token operator">:</span><span class="token operator">:</span>Handle<span class="token operator">&lt;</span>art<span class="token operator">:</span><span class="token operator">:</span>mirror<span class="token operator">:</span><span class="token operator">:</span>Class<span class="token operator">&gt;</span><span class="token punctuation">,</span> bool<span class="token punctuation">,</span> bool<span class="token operator">)</span><span class="token operator">+</span><span class="token number">1964</span><span class="token operator">)</span> <span class="token operator">(</span>BuildId<span class="token operator">:</span> <span class="token hash constant">691979e9d66dfedf3fd32d27da323a02</span><span class="token operator">)</span>    <span class="token operator">#</span><span class="token number">23</span> pc <span class="token number">000000000016e9a4</span>  <span class="token file-path string">/apex/com.android.runtime/lib64/libart.so</span> <span class="token operator">(</span>art<span class="token operator">:</span><span class="token operator">:</span>ClassLinker<span class="token operator">:</span><span class="token operator">:</span>EnsureInitialized<span class="token operator">(</span>art<span class="token operator">:</span><span class="token operator">:</span>Thread<span class="token operator">*</span><span class="token punctuation">,</span> art<span class="token operator">:</span><span class="token operator">:</span>Handle<span class="token operator">&lt;</span>art<span class="token operator">:</span><span class="token operator">:</span>mirror<span class="token operator">:</span><span class="token operator">:</span>Class<span class="token operator">&gt;</span><span class="token punctuation">,</span> bool<span class="token punctuation">,</span> bool<span class="token operator">)</span><span class="token operator">+</span><span class="token number">92</span><span class="token operator">)</span> <span class="token operator">(</span>BuildId<span class="token operator">:</span> <span class="token hash constant">691979e9d66dfedf3fd32d27da323a02</span><span class="token operator">)</span>    <span class="token operator">#</span><span class="token number">24</span> pc <span class="token number">00000000005bf8dc</span>  <span class="token file-path string">/apex/com.android.runtime/lib64/libart.so</span> <span class="token operator">(</span>artQuickResolutionTrampoline<span class="token operator">+</span><span class="token number">3140</span><span class="token operator">)</span> <span class="token operator">(</span>BuildId<span class="token operator">:</span> <span class="token hash constant">691979e9d66dfedf3fd32d27da323a02</span><span class="token operator">)</span>    <span class="token operator">#</span><span class="token number">25</span> pc <span class="token number">00000000001501e8</span>  <span class="token file-path string">/apex/com.android.runtime/lib64/libart.so</span> <span class="token operator">(</span>art_quick_resolution_trampoline<span class="token operator">+</span><span class="token number">88</span><span class="token operator">)</span> <span class="token operator">(</span>BuildId<span class="token operator">:</span> <span class="token hash constant">691979e9d66dfedf3fd32d27da323a02</span><span class="token operator">)</span>    <span class="token operator">#</span><span class="token number">26</span> pc <span class="token number">0000000000cc7d6c</span>  <span class="token file-path string">/data/app/com.xxx.yyy-O_XmVEkRKPw5wrtfpQ3R2w==/oat/arm64/base.odex</span> <span class="token operator">(</span>com<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>yyy<span class="token punctuation">.</span>T<span class="token punctuation">.</span>q<span class="token operator">+</span><span class="token number">316</span><span class="token operator">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过日志，可以很显示看到发生死锁的地方，与猜测B一致，至此线上量级Top 1的ANR问题终于水落石出。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>定位到问题后，解决方案就很简单了，联系对方Sdk团队，调整So的加载策略：</p><ul><li>避免在类的<strong>static</strong>块中加载So，可单独放在init方法中</li><li>避免在So的<code>JNI_OnLoad</code>中执行触发类初始化的操作</li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dead lock </tag>
            
            <tag> 死锁 </tag>
            
            <tag> anr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kotlin coroutine入门</title>
      <link href="/2022/02/28/kotlin-coroutine-basic/"/>
      <url>/2022/02/28/kotlin-coroutine-basic/</url>
      
        <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>客户端开发，无论是Android、iOS或是Windows，主线程（UI线程）需要及时相应用户的输入操作，才能保证用户滑动、移动鼠标时的流畅体验。<br>这要求主线程不能有占用CPU的耗时计算，或者IO等阻塞操作。</p><p>开发过程中为了避免UI线程被耗时操作阻塞，需要在异步线程执行耗时操作，然后通过callback通知UI线程刷新界面。一些复杂的页面需要嵌套很多层callback，造成了<a href="https://callbackhell.com/">callback hell</a>。</p><p>callback的方案既不符合人类的直观思维方式，让代码也变得难以维护。</p><p><a href="https://github.com/ReactiveX/RxJava">RxJava</a>的诞生，通过观察/订阅的思路，结合链式调用，优雅的解决了callback hell的问题。</p><p>随着Kotlin在Android上的成功推广，如今异步任务有了更底层、更轻量的新方案：<a href="https://kotlinlang.org/docs/coroutines-basics.html">Kotlin Coroutine</a></p><h3 id="什么是Coroutine"><a href="#什么是Coroutine" class="headerlink" title="什么是Coroutine"></a>什么是Coroutine</h3><blockquote><p>以下特指Kotlin Coroutine的概念</p></blockquote><ul><li><p>coroutine：<br>广义上，一种并发设计，通过执行一段可被挂起（调用suspend方法），恢复(suspend方法执行完毕)的代码，简化并发逻辑。<br>狭义上，Coroutine对象可以近似认为是支持了start、resume、cancel的Runnable对象，Kotlin的Coroutine类实现了Job接口。</p></li><li><p>suspend方法：<br>被suspend关键字修饰的方法，<strong>提示</strong>当前方法可能阻塞调用方。只能在CoroutineScope 或其他suspend方法中调用。</p></li><li><p>怎么挂起？<br>调用suspend方法。</p></li><li><p>怎么恢复？<br>编译器一个人默默扛下了所有。在编译阶段，会把suspend之后的代码块封装为Continuation作为参数注入原suspend方法，以实现resume能力。<br>相当于编译器自动为我们生成了callback。</p></li><li><p>运行到suspend方法（挂起）时当前线程是什么状态？<br>Running状态，继续运行调用suspend方法之外的代码。</p></li></ul><h3 id="如何使用Coroutine"><a href="#如何使用Coroutine" class="headerlink" title="如何使用Coroutine"></a>如何使用Coroutine</h3><p>举个例子🌰：</p><ul><li>launch<br>创建一个新的coroutine并执行，<strong>不关心返回值</strong></li></ul><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span> <span class="token comment">// this: CoroutineScope</span>    launch <span class="token punctuation">{</span> <span class="token comment">// launch a new coroutine and continue</span>        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">)</span> <span class="token comment">// non-blocking delay for 1 second (default time unit is ms)</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"World!"</span></span><span class="token punctuation">)</span> <span class="token comment">// print after delay</span>    <span class="token punctuation">}</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Hello"</span></span><span class="token punctuation">)</span> <span class="token comment">// main coroutine continues while a previous one is delayed</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>async</li></ul><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span>    <span class="token keyword">val</span> retDefer <span class="token operator">=</span> async <span class="token punctuation">{</span>          <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">)</span>          <span class="token string-literal singleline"><span class="token string">"from async return"</span></span>      <span class="token punctuation">}</span>    <span class="token keyword">val</span> ret <span class="token operator">=</span> retDefer<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token comment">// "from async return"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建新的coroutine并执行，<strong>关心返回值</strong></p><p><img src="/medias/images/launch_vs_async.png" alt="launch vs async"></p><h4 id="Structured-Concurrency"><a href="#Structured-Concurrency" class="headerlink" title="Structured Concurrency"></a>Structured Concurrency</h4><p>结构化并发，coroutine不同于Thread，有层级结构。</p><p>Java中的Thread只有Group的概念，没有父子关系，所有的线程都是同一级的，是兄弟关系。一个线程的死活、异常，不影响别的线程。</p><p>coroutine是有父子概念的，父coroutine被cancel，子的coroutine也会被cancel（如果正确的实现）。子coroutine如果有异常，会传播给父coroutine，<br>进而影响其他兄弟coroutine的执行。</p><p>Kotlin Coroutine遵循Structured Concurrency设计规范，通过Scope可以跟踪每个corouine的执行，确保不会泄露、丢失。</p><h4 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h4><p>一个Set，保存了coroutine的基础信息：</p><ul><li>CoroutineDispatcher 协程运行的Dispatcher（线程）</li><li>CoroutineExceptionHandler 异常后的处理方法</li><li>CoroutineName 协程的名字</li><li>Job 协程本体</li></ul><p><img src="/medias/images/coroutine_context.png" alt="coroutineContext"></p><h4 id="Dispatcher"><a href="#Dispatcher" class="headerlink" title="Dispatcher"></a>Dispatcher</h4><p>控制coroutine运行的线程，实现线程的切换。</p><ul><li>Dispatcher.Main 主线程，UI线程</li><li>Dispatcher.IO IO线程池，2个core线程，最大线程数max(64, cpu cores)</li><li>Dispatcher.Default 默认线程池，最大线程数为CPU核数</li></ul><h4 id="Job"><a href="#Job" class="headerlink" title="Job"></a>Job</h4><p>协程本体，增强版的Runnable。有start、cancel、resume的能力。通常情况下，如果单个Job发生异常，会传播给父Job，导致其他兄弟Job被cancel。<br><img src="/medias/images/job_when_exception.png" alt="Job When Exception"></p><p><strong>SupervisorJob</strong>可以把异常控制在自己的范围呢<br><img src="/medias/images/supervisor_job.png" alt="SupervisorJob"></p><h4 id="Scope"><a href="#Scope" class="headerlink" title="Scope"></a>Scope</h4><p>协程的作用域。往往Scope内会有多个coroutine执行，scope用来统一跟踪、管理每个coroutine，控制corountine的生命周期，包括子coroutine。</p><p>Scope持有Context</p><ul><li><p>创建coroutine<br>Corotine的构造函数都是未开放的，只能通过scope的launch/async扩展方法创建。launch方法返回Job对象，async方法返回Deferred对象，可控制单个coroutine的生命周期</p></li><li><p>异常处理<br>exceptionHandler，处理方法类似Thread.uncaughtExceptionHandler</p></li><li><p>取消<br>scope.cancel()，取消当前scope下的所有coroutine。<br>注意：kotlinx.coroutines包下的所有suspend方法都是可以被cancel的，但如果有自定义的suspend方法，需要通过协作的方式才能被cancel掉。<br>如调用<code>ensureActive()</code>方法：</p></li></ul><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">mySuspendFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>file <span class="token keyword">in</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ensureActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// check point</span>        file<span class="token punctuation">.</span><span class="token function">readText</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>常用的Scope：<ul><li>ViewModelScope<br>AndroidX中ViewModel扩展属性，ViewModel clear时自动cancel。默认运行在主线程</li><li>LifecycleScope<br>AndroidX中LifecycleOwner扩展属性，LifecyleOwner Destroy时，自动cancel。提供了<code>launchWhenCreated</code>、<code>launchWhenResumed</code>、<code>launchWhenStarted</code>的便利方法</li><li>GlobalScope<br>全局Scope，慎用，需要自己关注生命周期，防止coroutine泄露</li></ul></li></ul><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://kotlinlang.org/docs/coroutines-basics.html">Coroutines Basics</a></li><li><a href="https://www.youtube.com/watch?v=ZTDXo0-SKuU&amp;list=PLWz5rJ2EKKc-DpJGklgEE_w3kTO847Uxx">Kotlin Coroutines 101 - Android Conference Talks</a></li><li><a href="https://www.youtube.com/watch?v=IQf-vtIC-Uc&amp;list=PLWz5rJ2EKKc-DpJGklgEE_w3kTO847Uxx&amp;index=2">Suspend functions - Kotlin Vocabulary</a></li><li><a href="https://www.youtube.com/watch?v=FWxeDqM_WIU">Android Code-Along: Kotlin coroutines</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kotlin </tag>
            
            <tag> coroutine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android PluginManager 源码解析4--ActivityOverider</title>
      <link href="/2015/08/12/android-pluginmanager-source-code-analysis-4/"/>
      <url>/2015/08/12/android-pluginmanager-source-code-analysis-4/</url>
      
        <content type="html"><![CDATA[<h2 id="ActivityOverider概述"><a href="#ActivityOverider概述" class="headerlink" title="ActivityOverider概述"></a>ActivityOverider概述</h2><p><code>ActivityOverider</code>负责与动态生成的<code>PluginActivity</code>交互。</p><p><code>ActivityOverider</code>主要干了3件事：</p><ul><li>修正StartActivity的Intent</li><li>动态生成<code>PluginActivity</code>的Dex文件</li><li>处理<code>PluginActivity</code>生命周期的回调，根据需要做一些特殊处理</li></ul><h2 id="overrideStartActivityForResult方法解析"><a href="#overrideStartActivityForResult方法解析" class="headerlink" title="overrideStartActivityForResult方法解析"></a>overrideStartActivityForResult方法解析</h2><p>由于插件内的Activity没有在<code>AndroidManifest.xml</code>中注册，只注册了<code>androidx.pluginmgr.PluginActivity</code>，当通过<code>Context.startActivtiyForResult()</code>调起目标Activity时会找不到，所以需要对系统的<code>Context.startActivtiyForResult()</code>进行劫持，把要启动的Activity指向<code>androidx.pluginmgr.PluginActivity</code>，当加载<code>PluginActivity</code>时，通过<code>FrameworkClassLoader.loadClass()</code>方法再把类的加载路径修正回目标Activity，对系统进行了一个瞒天过海，骗过单纯的系统，哈哈。</p><p>startActivity可能启动的是插件内部的Activity，也可能是宿主的Activity，也可能是其它插件的Activity，这一切都交由<code>overrideStartActivityForResult()</code>方法处理。</p><span id="more"></span><ul><li><h3 id="启动明确指定类名的Activity"><a href="#启动明确指定类名的Activity" class="headerlink" title="启动明确指定类名的Activity"></a>启动明确指定类名的Activity</h3></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">// 取出ComponentName</span><span class="token class-name">ComponentName</span> compname <span class="token operator">=</span> intent<span class="token punctuation">.</span><span class="token function">getComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 取包名</span><span class="token class-name">String</span> pkg <span class="token operator">=</span> compname<span class="token punctuation">.</span><span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 取Activity类名</span><span class="token class-name">String</span> toActName <span class="token operator">=</span> compname<span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据插件id取缓存PluginInfo</span><span class="token class-name">PlugInfo</span> thisPlugin <span class="token operator">=</span> mgr<span class="token punctuation">.</span><span class="token function">getPluginById</span><span class="token punctuation">(</span>pluginId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ActivityInfo</span> actInThisApk <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">PlugInfo</span> plug <span class="token operator">=</span> thisPlugin<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pkg <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 启动同一插件内的Activity</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pkg<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>thisPlugin<span class="token punctuation">.</span><span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>actInThisApk <span class="token operator">=</span> thisPlugin<span class="token punctuation">.</span><span class="token function">findActivityByClassName</span><span class="token punctuation">(</span>toActName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 启动另一插件内的Activity</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token class-name">PlugInfo</span> otherPlug <span class="token operator">=</span> mgr<span class="token punctuation">.</span><span class="token function">getPluginByPackageName</span><span class="token punctuation">(</span>pkg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>otherPlug <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>plug <span class="token operator">=</span> otherPlug<span class="token punctuation">;</span>actInThisApk <span class="token operator">=</span> otherPlug<span class="token punctuation">.</span><span class="token function">findActivityByClassName</span><span class="token punctuation">(</span>toActName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">// 容错处理，启动同一插件内的Activity</span>actInThisApk <span class="token operator">=</span> thisPlugin<span class="token punctuation">.</span><span class="token function">findActivityByClassName</span><span class="token punctuation">(</span>toActName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">setPluginIntent</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span> plug<span class="token punctuation">,</span> actInThisApk<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><h3 id="启动有具体Action的Activity"><a href="#启动有具体Action的Activity" class="headerlink" title="启动有具体Action的Activity"></a>启动有具体Action的Activity</h3></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> action <span class="token operator">=</span> intent<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">PlugInfo</span> thisPlugin <span class="token operator">=</span> mgr<span class="token punctuation">.</span><span class="token function">getPluginById</span><span class="token punctuation">(</span>pluginId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ActivityInfo</span> actInThisApk <span class="token operator">=</span> thisPlugin<span class="token punctuation">.</span><span class="token function">findActivityByAction</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">setPluginIntent</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span> thisPlugin<span class="token punctuation">,</span> actInThisApk<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><h3 id="偷天换日，修改Intent"><a href="#偷天换日，修改Intent" class="headerlink" title="偷天换日，修改Intent"></a>偷天换日，修改Intent</h3></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setPluginIntent</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">,</span> <span class="token class-name">PlugInfo</span> plugin<span class="token punctuation">,</span><span class="token class-name">String</span> actName<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">PluginManager</span> mgr <span class="token operator">=</span> <span class="token class-name">PluginManager</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> pluginId <span class="token operator">=</span> plugin<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据类名动态生成新的PluginActivity</span><span class="token function">createProxyDex</span><span class="token punctuation">(</span>plugin<span class="token punctuation">,</span> actName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 修改Intent中的ComponentName，将其指向androidx.pluginmgr.PluginActivity</span><span class="token class-name">String</span> act <span class="token operator">=</span> mgr<span class="token punctuation">.</span><span class="token function">getFrameworkClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newActivityClassName</span><span class="token punctuation">(</span>pluginId<span class="token punctuation">,</span> actName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ComponentName</span> compname <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComponentName</span><span class="token punctuation">(</span>mgr<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> act<span class="token punctuation">)</span><span class="token punctuation">;</span>intent<span class="token punctuation">.</span><span class="token function">setComponent</span><span class="token punctuation">(</span>compname<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="动态生成PluginActivity"><a href="#动态生成PluginActivity" class="headerlink" title="动态生成PluginActivity"></a>动态生成PluginActivity</h2><p>通过<code>createProxyDex()</code>为要加载的Activity生成代理类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token class-name">String</span> pkgName <span class="token operator">=</span> plugin<span class="token punctuation">.</span><span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ActivityClassGenerator</span><span class="token punctuation">.</span><span class="token function">createActivityDex</span><span class="token punctuation">(</span>activity<span class="token punctuation">,</span> targetClassName<span class="token punctuation">,</span>saveDir<span class="token punctuation">,</span> plugin<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pkgName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">getStackTraceString</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体生成机制委托给<code>ActivityClassGenerator</code>实现，后面再分析。</p><h2 id="Activity生命周期回调"><a href="#Activity生命周期回调" class="headerlink" title="Activity生命周期回调"></a>Activity生命周期回调</h2><p><code>PluginActivity</code>的一些生命周期方法会回调到<code>ActivityOverider</code>里。</p><p>比较重要的几个有<code>overrideAttachBaseContext()</code>，<code>callback_onCreate()</code></p><p>先看<code>overrideAttachBaseContext()</code>。</p><h3 id="overrideAttachBaseContext"><a href="#overrideAttachBaseContext" class="headerlink" title="overrideAttachBaseContext()"></a>overrideAttachBaseContext()</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">PlugInfo</span> plugin <span class="token operator">=</span> <span class="token class-name">PluginManager</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPluginById</span><span class="token punctuation">(</span>pluginId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>plugin<span class="token punctuation">.</span><span class="token function">getApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token class-name">PluginManager</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">initPluginApplication</span><span class="token punctuation">(</span>plugin<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">getStackTraceString</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token class-name">PluginActivityWrapper</span> actWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PluginActivityWrapper</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> plugin<span class="token punctuation">.</span>appWrapper<span class="token punctuation">,</span> plugin<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> actWrapper<span class="token punctuation">,</span> plugin<span class="token punctuation">.</span><span class="token function">getAssetManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>overrideAttachBaseContext()</code>方法是为了更改Activity中的Context，把默认宿主的Context替换为修改过后的插件Context。</p><p>由于Activity是继承自<code>ContextThemeWrapper</code>，而Application是继承<code>ContextWrapper</code>，所以这里不能直接使用<code>PluginContextWrapper</code>，而是把在Application初始化时生成的<code>PluginContextWrapper</code>注入继承自<code>ContextThemeWrapper</code>的<code>PluginActivityWrapper</code>。</p><p>这样插件Application的Context与插件Activity的Context便在行为上一致了。</p><p>接着来看<code>callback_onCreate()</code>。</p><h3 id="callback-onCreate"><a href="#callback-onCreate" class="headerlink" title="callback_onCreate()"></a>callback_onCreate()</h3><ul><li><code>callback_onCreate()</code>先替换了Activity的Application。</li></ul><p>因为<code>PluginActivity</code>实际还是在宿主中调起的，所以默认的Context、Application都是宿主的。既然Context已经替换了，那Application也不能漏掉。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token class-name">Field</span> applicationField <span class="token operator">=</span> <span class="token class-name">Activity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"mApplication"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>applicationField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>applicationField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>fromAct<span class="token punctuation">,</span> plugin<span class="token punctuation">.</span><span class="token function">getApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>处理activity的主题</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">// PluginActivity是动态生成并继承与原来的Activity，所以此处需要取supperClass的name</span><span class="token class-name">String</span> actName <span class="token operator">=</span> fromAct<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 从通过PluginManifestUtil解析的Activity list中查找当前Activity的ActivityInfo</span><span class="token class-name">ActivityInfo</span> actInfo <span class="token operator">=</span> plugin<span class="token punctuation">.</span><span class="token function">findActivityByClassName</span><span class="token punctuation">(</span>actName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> resTheme <span class="token operator">=</span> actInfo<span class="token punctuation">.</span><span class="token function">getThemeResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 如果使用了主题</span><span class="token keyword">if</span> <span class="token punctuation">(</span>resTheme <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">boolean</span> hasNotSetTheme <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token class-name">Field</span> mTheme <span class="token operator">=</span> <span class="token class-name">ContextThemeWrapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"mTheme"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mTheme<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 判断PluginActivity的mTheme字段是否为空，为空表示没有设置过主题</span>hasNotSetTheme <span class="token operator">=</span> mTheme<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>fromAct<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>hasNotSetTheme<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 替换PluginActivity的mActivityInfo</span><span class="token function">changeActivityInfo</span><span class="token punctuation">(</span>fromAct<span class="token punctuation">)</span><span class="token punctuation">;</span>fromAct<span class="token punctuation">.</span><span class="token function">setTheme</span><span class="token punctuation">(</span>resTheme<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里为何在设置了主题后才替换mActivityInfo，暂时还没有看懂。</p><ul><li>替换PluginActivity的mActivityInfo</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token class-name">Field</span> field_mActivityInfo<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>field_mActivityInfo <span class="token operator">=</span> <span class="token class-name">Activity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"mActivityInfo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>field_mActivityInfo<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">getStackTraceString</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">PluginManager</span> con <span class="token operator">=</span> <span class="token class-name">PluginManager</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">PlugInfo</span> plugin <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">getPluginByPackageName</span><span class="token punctuation">(</span>activity<span class="token punctuation">.</span><span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ActivityInfo</span> actInfo <span class="token operator">=</span> plugin<span class="token punctuation">.</span><span class="token function">findActivityByClassName</span><span class="token punctuation">(</span>actName<span class="token punctuation">)</span><span class="token punctuation">;</span>actInfo<span class="token punctuation">.</span>applicationInfo <span class="token operator">=</span> plugin<span class="token punctuation">.</span><span class="token function">getPackageInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>applicationInfo<span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>field_mActivityInfo<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>activity<span class="token punctuation">,</span> actInfo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">getStackTraceString</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>处理回调</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">PluginActivityLifeCycleCallback</span> callback <span class="token operator">=</span> <span class="token class-name">PluginManager</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPluginActivityLifeCycleCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>callback <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>callback<span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>pluginId<span class="token punctuation">,</span> fromAct<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果注册了<code>PluginActivityLifeCycleCallback</code>，会在相应的生命周期内触发回调。</p><p>剩下一些其他的生命周期没有做额外的处理，只是处理了<code>PluginActivityLifeCycleCallback</code>回调，就略过了。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 插件 </tag>
            
            <tag> PluginActivity </tag>
            
            <tag> ContextWrapper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android PluginManager 源码解析3--PluginManifestUtil</title>
      <link href="/2015/08/11/android-pluginmanager-source-code-analysis-3/"/>
      <url>/2015/08/11/android-pluginmanager-source-code-analysis-3/</url>
      
        <content type="html"><![CDATA[<h2 id="PluginManifestUtil分析"><a href="#PluginManifestUtil分析" class="headerlink" title="PluginManifestUtil分析"></a>PluginManifestUtil分析</h2><p><strong>PluginManifestUtil</strong>是<strong>Android PluginManager</strong>的一个工具类。只有一个公共方法<code>setManifestInfo()</code>，负责解析插件apk中的androidManifest.xml文件，并将解析的信息保存到<code>PluginInfo</code>中。</p><ul><li><h3 id="解析PackageInfo"><a href="#解析PackageInfo" class="headerlink" title="解析PackageInfo"></a>解析PackageInfo</h3></li></ul><p>通过<code>PackageManager</code>获取插件apk文件的<code>PackageInfo</code>，保持在<code>PluginInfo</code>中。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">PackageInfo</span> pkgInfo <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPackageArchiveInfo</span><span class="token punctuation">(</span>apkPath<span class="token punctuation">,</span><span class="token class-name">PackageManager</span><span class="token punctuation">.</span>GET_ACTIVITIES<span class="token operator">|</span> <span class="token class-name">PackageManager</span><span class="token punctuation">.</span>GET_RECEIVERS<span class="token comment">//</span><span class="token operator">|</span> <span class="token class-name">PackageManager</span><span class="token punctuation">.</span>GET_PROVIDERS<span class="token comment">//</span><span class="token operator">|</span> <span class="token class-name">PackageManager</span><span class="token punctuation">.</span>GET_META_DATA<span class="token comment">//</span><span class="token operator">|</span> <span class="token class-name">PackageManager</span><span class="token punctuation">.</span>GET_SHARED_LIBRARY_FILES<span class="token comment">//</span><span class="token comment">// | PackageManager.GET_SERVICES//</span><span class="token comment">// | PackageManager.GET_SIGNATURES//</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Log.d("ManifestReader: setManifestInfo", "GET_SHARED_LIBRARY_FILES="</span><span class="token comment">// + pkgInfo.applicationInfo.nativeLibraryDir);</span>info<span class="token punctuation">.</span><span class="token function">setPackageInfo</span><span class="token punctuation">(</span>pkgInfo<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>PackageInfo</code>保存有插件apk的包名、版本、注册的activities、services、receivers、providers、声明的权限等信息。<br>但是<strong>Android PluginManager</strong>目前只处理了activities、receivers。</p><span id="more"></span><ul><li><h3 id="处理so文件"><a href="#处理so文件" class="headerlink" title="处理so文件"></a>处理so文件</h3></li></ul><p>查找插件apk中的<code>lib</code>中的so文件，并解压到<code>PluginBaseDir</code>即<code>PluginManager</code>中<code>dexInternalStoragePath</code> + <code>pluginId</code>+<code>lib</code>下面。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">File</span> libdir <span class="token operator">=</span> <span class="token class-name">ActivityOverider</span><span class="token punctuation">.</span><span class="token function">getPluginLibDir</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">extractLibFile</span><span class="token punctuation">(</span>zipFile<span class="token punctuation">,</span> libdir<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>pkgInfo<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>nativeLibraryDir<span class="token operator">=</span>libdir<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>zipFile<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查找过程会根据设备cpu架构copy相应的文件到<code>PluginBaseDir</code>。</p><ul><li><h3 id="自定义解析manifest-xml"><a href="#自定义解析manifest-xml" class="headerlink" title="自定义解析manifest.xml"></a>自定义解析manifest.xml</h3></li></ul><p>使用<code>XmlManifestReader.getManifestXMLFromAPK()</code>读取插件apk中的manifest文件，然后通过<code>setAttrs()</code>方法解析manifest文件，把activity、reciever、application的信息保存在<code>PluginInfo</code>中。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ZipFile</span> zipFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipFile</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>apkPath<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">ZipFile</span><span class="token punctuation">.</span>OPEN_READ<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ZipEntry</span> manifestXmlEntry <span class="token operator">=</span> zipFile<span class="token punctuation">.</span><span class="token function">getEntry</span><span class="token punctuation">(</span><span class="token class-name">XmlManifestReader</span><span class="token punctuation">.</span>DEFAULT_XML<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> manifestXML <span class="token operator">=</span> <span class="token class-name">XmlManifestReader</span><span class="token punctuation">.</span><span class="token function">getManifestXMLFromAPK</span><span class="token punctuation">(</span>zipFile<span class="token punctuation">,</span>manifestXmlEntry<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">setAttrs</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span> manifestXML<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><h3 id="绑定manifestXml信息到PluginInfo"><a href="#绑定manifestXml信息到PluginInfo" class="headerlink" title="绑定manifestXml信息到PluginInfo"></a>绑定manifestXml信息到PluginInfo</h3></li></ul><p>分别解析application、activity、reciever、service的信息，并绑定到<code>PluginInfo</code>。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">do</span> <span class="token punctuation">{</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>eventType<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token class-name">XmlPullParser</span><span class="token punctuation">.</span>START_DOCUMENT<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">case</span> <span class="token class-name">XmlPullParser</span><span class="token punctuation">.</span>START_TAG<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token class-name">String</span> tag <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>tag<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"manifest"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>namespaceAndroid <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">getNamespace</span><span class="token punctuation">(</span><span class="token string">"android"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"activity"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>parser<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">addActivity</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span> namespaceAndroid<span class="token punctuation">,</span> parser<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"receiver"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>parser<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">addReceiver</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span> namespaceAndroid<span class="token punctuation">,</span> parser<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"service"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>parser<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">addService</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span> namespaceAndroid<span class="token punctuation">,</span> parser<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"application"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>parser<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">parseApplicationInfo</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span> namespaceAndroid<span class="token punctuation">,</span> parser<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">case</span> <span class="token class-name">XmlPullParser</span><span class="token punctuation">.</span>END_TAG<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>eventType <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>eventType <span class="token operator">!=</span> <span class="token class-name">XmlPullParser</span><span class="token punctuation">.</span>END_DOCUMENT<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面已activity为例分析。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token class-name">ResolveInfo</span> act <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResolveInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>act<span class="token punctuation">.</span>activityInfo <span class="token operator">=</span> info<span class="token punctuation">.</span><span class="token function">findActivityByClassNameFromPkg</span><span class="token punctuation">(</span>activityName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token punctuation">{</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>eventType<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token class-name">XmlPullParser</span><span class="token punctuation">.</span>START_TAG<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token class-name">String</span> tag <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"intent-filter"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>act<span class="token punctuation">.</span>filter <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>act<span class="token punctuation">.</span>filter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntentFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"action"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">String</span> actionName <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">getAttributeValue</span><span class="token punctuation">(</span>namespace<span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>act<span class="token punctuation">.</span>filter<span class="token punctuation">.</span><span class="token function">addAction</span><span class="token punctuation">(</span>actionName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"category"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">String</span> category <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">getAttributeValue</span><span class="token punctuation">(</span>namespace<span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>act<span class="token punctuation">.</span>filter<span class="token punctuation">.</span><span class="token function">addCategory</span><span class="token punctuation">(</span>category<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// TODO parse data</span><span class="token punctuation">}</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>eventType <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">"activity"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>parser<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span>info<span class="token punctuation">.</span><span class="token function">addActivity</span><span class="token punctuation">(</span>act<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>模拟系统解析<code>ResolveInfo</code>的方式，为每一个插件apk中注册的Activity生成一个<code>ResolveInfo</code>，保存在<code>PluginInfo</code>中，供之后获取指定<code>Intent-Filter</code>的Activity、Service等使用。</p><p>目前对于<code>intent-filter</code>中的<code>data</code>标签没有处理。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="http://developer.android.com/reference/android/content/pm/ResolveInfo.html">ResolveInfo</a></li><li><a href="http://blog.csdn.net/wang_yubin/article/details/8564335">android ResolveInfo运用</a></li><li><a href="http://blog.csdn.net/lo5sea/article/details/38564991">PackageInfo、ResolveInfo</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 插件 </tag>
            
            <tag> PackageManager </tag>
            
            <tag> androidManifest </tag>
            
            <tag> PackageInfo </tag>
            
            <tag> ResolveInfo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android PluginManager 源码解析2--FrameworkClassLoader</title>
      <link href="/2015/08/10/android-pluginmanager-source-code-analysis-2/"/>
      <url>/2015/08/10/android-pluginmanager-source-code-analysis-2/</url>
      
        <content type="html"><![CDATA[<p>学习<strong>Android PluginManager</strong>加载插件的机制，需要先了解系统是如何加载Activity的。</p><h2 id="Android-启动Activity的机制"><a href="#Android-启动Activity的机制" class="headerlink" title="Android 启动Activity的机制"></a>Android 启动Activity的机制</h2><p>Android系统的Activity是通过 <code>AndroidThread</code>.<code>performLaunchActivity()</code>方法生成并启动的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Activity</span> activity <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>ClassLoader</span> cl <span class="token operator">=</span> r<span class="token punctuation">.</span>packageInfo<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    activity <span class="token operator">=</span> mInstrumentation<span class="token punctuation">.</span><span class="token function">newActivity</span><span class="token punctuation">(</span>            cl<span class="token punctuation">,</span> component<span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">StrictMode</span><span class="token punctuation">.</span><span class="token function">incrementExpectedActivityCount</span><span class="token punctuation">(</span>activity<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    r<span class="token punctuation">.</span>intent<span class="token punctuation">.</span><span class="token function">setExtrasClassLoader</span><span class="token punctuation">(</span>cl<span class="token punctuation">)</span><span class="token punctuation">;</span>    r<span class="token punctuation">.</span>intent<span class="token punctuation">.</span><span class="token function">prepareToEnterProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>state <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        r<span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token function">setClassLoader</span><span class="token punctuation">(</span>cl<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mInstrumentation<span class="token punctuation">.</span><span class="token function">onException</span><span class="token punctuation">(</span>activity<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>            <span class="token string">"Unable to instantiate activity "</span> <span class="token operator">+</span> component            <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>r.packageInfo</code>是一个<code>LoadedApk</code>对象，保存了加载dex中class文件的ClassLoader，默认是系统的<code>PathClassLoader</code>。</p><p>通过<code>AndroidThread</code>源码，看出<code>AndroidThread</code>通过委托给<code>Instrumentation</code>的<code>newActivity()</code>方法生成Activity。</p><span id="more"></span><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Activity</span> <span class="token function">newActivity</span><span class="token punctuation">(</span><span class="token class-name">ClassLoader</span> cl<span class="token punctuation">,</span> <span class="token class-name">String</span> className<span class="token punctuation">,</span>        <span class="token class-name">Intent</span> intent<span class="token punctuation">)</span>        <span class="token keyword">throws</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span>        <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Activity</span><span class="token punctuation">)</span>cl<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>newActivity()</code>方法使用注入的ClassLoader直接load Activity的类名生成activity。</p><p>由于默认是系统的<code>PathClassLoader</code>，不支持从apk中加载类文件，所以我们需要更改ClassLoader来实现加载插件apk中的类文件。</p><p>之前<strong>Android PluginManager</strong>在初始化的时候通过反射更改了Context的ClassLoader .</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Object</span> mPackageInfo <span class="token operator">=</span> <span class="token class-name">ReflectionUtils</span><span class="token punctuation">.</span><span class="token function">getFieldValue</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span>                    <span class="token string">"mBase.mPackageInfo"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            frameworkClassLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FrameworkClassLoader</span><span class="token punctuation">(</span>                    ctx<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// set Application's classLoader to FrameworkClassLoader</span>            <span class="token class-name">ReflectionUtils</span><span class="token punctuation">.</span><span class="token function">setFieldValue</span><span class="token punctuation">(</span>mPackageInfo<span class="token punctuation">,</span> <span class="token string">"mClassLoader"</span><span class="token punctuation">,</span>                    frameworkClassLoader<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>mBase</code>就是<code>ContextImpl</code>，具体原因参见<a href="/2015/08/09/android-pluginmanager-source-code-analysis-1/#%E5%88%9D%E5%A7%8B%E5%8C%96%E6%8F%92%E4%BB%B6%E7%9A%84application">分析1</a>中ContextWapper的解释。</p><p><code>r.packageInfo</code>和<code>ContexImpl</code>的<code>mPackageInfo</code>是同一对象。</p><p>这样之后在加载Activity类文件时就会使用替换过的<code>FrameworkClassLoader</code>了。</p><h2 id="FrameworkClassLoader"><a href="#FrameworkClassLoader" class="headerlink" title="FrameworkClassLoader"></a>FrameworkClassLoader</h2><p><code>FrameworkClassLoader</code>职责比较简单，主要负责根据不同的类名选择不同的classLoader加载。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>plugId <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">String</span> pluginId <span class="token operator">=</span> plugId<span class="token punctuation">;</span><span class="token class-name">PlugInfo</span> plugin <span class="token operator">=</span> <span class="token class-name">PluginManager</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPluginById</span><span class="token punctuation">(</span>pluginId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>plugin <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>className<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">ActivityOverider</span><span class="token punctuation">.</span>targetClassName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">String</span> actClassName <span class="token operator">=</span> actName<span class="token punctuation">;</span><span class="token keyword">return</span> plugin<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loadActivityClass</span><span class="token punctuation">(</span>actClassName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">return</span> plugin<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>className<span class="token punctuation">,</span> resolv<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里有三种情况：</p><ul><li><p>加载插件中的Activity类</p><p>当<code>className</code>为<code>androidx.pluginmgr.PluginActivity</code>时，说明要加载的类是由<strong>Android PluginManager</strong>自动生成的activity代理类，具体加载实现交由<code>PluginClassLoader.loadActivityClass()</code>处理。</p></li><li><p>加载插件中非Activity类</p><p>当<code>className</code>为插件的其它自定义类时，选择<code>PluginClassLoader.loadClass()</code>加载。</p></li><li><p>加载宿主中的类</p></li></ul><p>不是插件中的类，或者插件中的类加载异常了，选择默认的ClassLoader加载类。</p><p>引用<a href="http://blog.csdn.net/hkxxx/article/details/42194387">作者hkxxx大神</a>的两张图作说明：</p><p><img src="/img/frameworkclassloader.png" alt="插件启动流程图"></p><p><img src="/img/am_frameworkclassloader_class_diagram.png" alt="framwork classloader类加载结构"></p><h2 id="PluginClassLoader"><a href="#PluginClassLoader" class="headerlink" title="PluginClassLoader"></a>PluginClassLoader</h2><p><code>PluginClassLoader</code>继承自<code>DexClassLoader</code>，使用<code>FrameworkClassLoader</code>作为其委托的父ClassLoader。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// pluginManager初始化时实例化的PluginClassLoader</span><span class="token class-name">PluginClassLoader</span> loader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PluginClassLoader</span><span class="token punctuation">(</span>dexPath<span class="token punctuation">,</span>               dexOutputPath<span class="token punctuation">,</span> frameworkClassLoader<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// PluginClassLoader构造函数</span><span class="token keyword">public</span> <span class="token class-name">PluginClassLoader</span><span class="token punctuation">(</span><span class="token class-name">String</span> dexPath<span class="token punctuation">,</span> <span class="token class-name">String</span> optimizedDir<span class="token punctuation">,</span> <span class="token class-name">ClassLoader</span> parent<span class="token punctuation">,</span> <span class="token class-name">PlugInfo</span> plugin<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span>dexPath<span class="token punctuation">,</span> optimizedDir<span class="token punctuation">,</span>plugin<span class="token punctuation">.</span><span class="token function">getPackageInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>nativeLibraryDir<span class="token punctuation">,</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>thisPlugin <span class="token operator">=</span> plugin<span class="token punctuation">;</span>proxyActivityLoaderMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>plugin<span class="token punctuation">.</span><span class="token function">getActivities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>libraryPath <span class="token operator">=</span> plugin<span class="token punctuation">.</span><span class="token function">getPackageInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>nativeLibraryDir<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>optimizedDirectory <span class="token operator">=</span> optimizedDir<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>PluginClassLoader</code>维护一个DexClassLoader的map，缓存插件每个Activity的classLoader。</p><p>为什么需要为每一个Activity都生成一个classloader呢？</p><p>接着看<code>loadActivityClass()</code>方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">loadActivityClass</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> actClassName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span><span class="token class-name">File</span> dexSavePath <span class="token operator">=</span> <span class="token class-name">ActivityOverider</span><span class="token punctuation">.</span><span class="token function">createProxyDex</span><span class="token punctuation">(</span>thisPlugin<span class="token punctuation">,</span> actClassName<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ClassLoader</span> actLoader <span class="token operator">=</span> proxyActivityLoaderMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>actClassName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>actLoader <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>actLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DexClassLoader</span><span class="token punctuation">(</span>dexSavePath<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> optimizedDirectory<span class="token punctuation">,</span>libraryPath<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">boolean</span> resolve<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span><span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"PlugActClassLoader("</span><span class="token operator">+</span> actClassName<span class="token operator">+</span><span class="token string">")"</span><span class="token punctuation">,</span> <span class="token string">"loadClass: "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ActivityOverider</span><span class="token punctuation">.</span>targetClassName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> c <span class="token operator">=</span> <span class="token function">findLoadedClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"PlugActClassLoader("</span><span class="token operator">+</span> actClassName<span class="token operator">+</span><span class="token string">")"</span><span class="token punctuation">,</span> <span class="token string">"findClass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c <span class="token operator">=</span> <span class="token function">findClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">resolveClass</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> resolve<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>proxyActivityLoaderMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>actClassName<span class="token punctuation">,</span> actLoader<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> actLoader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token class-name">ActivityOverider</span><span class="token punctuation">.</span>targetClassName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原来，<code>loadActivityClass()</code>方法在加载插件的Activity之前，为每个Activity使用<strong>dexmaker</strong>动态生成了一个代理的<code>PluginActivity</code>继承自原Activity，这样插件中的每个Activity都有一个<code>PluginActivity.dex</code>文件。</p><p>另外，由于<a href="http://www.trinea.cn/android/java-loader-common-class/">ClassLoader隔离问题</a>，必须把每个classloader缓存起来，以免下次重新加载同一类会报类型转换失败的错。</p><p>这里new的DexClassLoader重载了<code>loadClass()</code>方法，当要加载类是<code>androidx.pluginmgr.PluginActivity</code>时 ，更改了默认的查找方式，不再先从parent Classloader中查找，而是直接自己查找类文件。</p><p>值得注意的是，生成<code>PluginActivity.dex</code>的过程一直处于主线程，其中进行了大量的文件操作，可能会引起ANR。</p><p>剩下就是重载ClassLoader的<code>loadClass()</code>方法了。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">boolean</span> resolve<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token function">getClassLoadingLock</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// First, check if the class has already been loaded</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> c <span class="token operator">=</span> <span class="token function">findLoadedClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"android.support."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">try</span> <span class="token punctuation">{</span>c <span class="token operator">=</span> <span class="token function">findClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>c <span class="token operator">=</span> <span class="token function">findByParent</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>c <span class="token operator">=</span> <span class="token function">findByParent</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>c <span class="token operator">=</span> <span class="token function">findClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">resolveClass</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里判断了如果类名是以<code>android.support.</code>开头，说明是support包里的类，优先从当前的classloader加载，在插件中找不到时再从宿主中查找，避免与宿主support包冲突。</p><p>如果类名不以<code>android.support.</code>开头，则还是遵循java的ClassLoader的加载类的方式，先委托给parent查找，找不到再从自己查找。</p><p><code>findByParent()</code>方法是为了查找真正宿主的ClassLoader。先取当前ClassLoader的parent ClassLoader，如果是FrameworkClassLoader的话，继续向上查找，即是宿主的ClassLoader。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> c <span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token class-name">ClassLoader</span> parent <span class="token operator">=</span> <span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">FrameworkClassLoader</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>parent <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>c <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>throwEx<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">throw</span> e<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> c<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 插件 </tag>
            
            <tag> 反射 </tag>
            
            <tag> ClassLoader </tag>
            
            <tag> DexClassLoader </tag>
            
            <tag> AndroidThread </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android PluginManager 源码解析1--PluginManager</title>
      <link href="/2015/08/08/android-pluginmanager-source-code-analysis-1/"/>
      <url>/2015/08/08/android-pluginmanager-source-code-analysis-1/</url>
      
        <content type="html"><![CDATA[<h2 id="Android-PluginManager简介"><a href="#Android-PluginManager简介" class="headerlink" title="Android PluginManager简介"></a>Android PluginManager简介</h2><p><strong>Android pluginManager</strong>是<a href="https://github.com/houkx/">HouKangxi</a>大神开发的一个android插件化开发框架，可以动态的加载apk，实现组件的热插拔。</p><p>项目地址：<a href="">https://github.com/houkx/android-pluginmgr</a></p><p>相比于其他的插件化解决方案，<strong>Android pluginManager</strong>主要优势是采用了动态代理技术，自动为插件生成代理activity，插件apk基本无需做任何更改。</p><h3 id="实现的功能点："><a href="#实现的功能点：" class="headerlink" title="实现的功能点："></a>实现的功能点：</h3><ul><li>插件为普通apk，无须依赖任何jar(摘自<a href="http://blog.csdn.net/hkxxx/article/details/42194387">作者的博客</a>)</li><li>Activity生命周期由系统自己管理</li><li>使用简单，只需要了解一个类PluginManager的两个方法</li><li>启动Activity的效率高</li><li>不修改插件，被加载的插件仍然可以独立安装。</li><li>可加载任意apk中的 Activity (包括子类 ActionBarActivity 、FragmentActivity)的派生类(不包括违反限制条件的Activity)</li><li>支持插件自定义Application</li><li>支持插件Apk中的Activity跳转到别的Activity(插件内部的或系统的,外部已安装apk的，甚至是别的插件中的),也没有任何限制</li><li>支持Activity设置主题(与系统的主题应用规则一样，如果Activity没指定Theme,但所在Application指定了Theme，则使用Application的Theme)</li><li>初步支持.so</li><li>支持插件使用 SharedPreference 或 SQLite数据库(尚未完善)</li></ul><span id="more"></span><h3 id="尚未完成的部分："><a href="#尚未完成的部分：" class="headerlink" title="尚未完成的部分："></a>尚未完成的部分：</h3><ul><li>目前还不支持service、content provider</li></ul><h3 id="一些限制："><a href="#一些限制：" class="headerlink" title="一些限制："></a>一些限制：</h3><ul><li>插件中的权限，无法动态注册，插件中的权限都得在宿主中注册</li><li>不支持多进程</li><li>Manifest中注册的activity的目前只能使用一种launchMode，<br>要支持singleTask等多种launchMode，需要自己维护activity栈来模拟。</li></ul><h3 id="动态加载apk的思路："><a href="#动态加载apk的思路：" class="headerlink" title="动态加载apk的思路："></a>动态加载apk的思路：</h3><p>就目前自己了解的情况来看，动态加载apk，一般是通过DexClassLoader，加载apk中的Activity。</p><p>此时调起的Activity是普通的Java对象，没有了onCreate() 、onStart ()、onResume()、onPause()、onStop()、onDestory()等生命周期。</p><p>为解决这个问题，一般都会在宿主中有一个ProxyActivity，它是一个真实的Activity，由系统管理它的生命周期。</p><p>ProxyActivity持有一个插件的Activity的引用，当系统触发ProxyActivity的生命周期时，ProxyActivity通知插件的Activity来模拟正常Activity的生命周期。</p><p>ProxyActivity通知插件的Activity方式分为两种：</p><ul><li>直接通过反射调用插件Activity的生命周期方法。效率较低</li><li>插件Activity继承一个BasePluginActivity或者实现一个PluginInterface。对插件浸入性较大，需要改动较多代码。</li></ul><p>其中一个难点是插件资源文件的访问。</p><p>由于Activity变成了普通的Java对象，没有了Context，不能通过getResources()直接访问插件中的资源。<br>解决方案有几种：</p><ul><li>把插件的资源复制到宿主中，向插件注入宿主的Context</li><li>把插件的资源解压到sd卡某路径下，以流的形式读取，自己解析</li><li>修改AssetManager，把插件的路径添加到AssetManager中</li></ul><h2 id="PluginManager初始化"><a href="#PluginManager初始化" class="headerlink" title="PluginManager初始化"></a>PluginManager初始化</h2><ul><li><h3 id="获取application-Context"><a href="#获取application-Context" class="headerlink" title="获取application Context"></a>获取application Context</h3></li></ul><p>PluginManager是一个单例，在初始化时将宿主（host）application Context 作为PluginManager的Context</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Context</span> ctx <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">PluginManager</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    instance<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><h3 id="创建plugins目录"><a href="#创建plugins目录" class="headerlink" title="创建plugins目录"></a>创建plugins目录</h3></li></ul><p>在<code>dexInternalStoragePath</code>目录下保存插件的原apk文件，及动态生成的新的dex文件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">dexInternalStoragePath <span class="token operator">=</span> context        <span class="token punctuation">.</span><span class="token function">getDir</span><span class="token punctuation">(</span><span class="token string">"plugins"</span><span class="token punctuation">,</span> <span class="token class-name">Context</span><span class="token punctuation">.</span>MODE_PRIVATE<span class="token punctuation">)</span><span class="token punctuation">;</span>dexInternalStoragePath<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><h3 id="创建pluginouts目录"><a href="#创建pluginouts目录" class="headerlink" title="创建pluginouts目录"></a>创建pluginouts目录</h3></li></ul><p>在<code>dexOutputPath</code>目录下保存插件的原dex文件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">File</span> optimizedDexPath <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getDir</span><span class="token punctuation">(</span><span class="token string">"plugsout"</span><span class="token punctuation">,</span> <span class="token class-name">Context</span><span class="token punctuation">.</span>MODE_PRIVATE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>optimizedDexPath<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    optimizedDexPath<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>dexOutputPath <span class="token operator">=</span> optimizedDexPath<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><h3 id="替换classLoader"><a href="#替换classLoader" class="headerlink" title="替换classLoader"></a>替换classLoader</h3></li></ul><p>把宿主 application context 的<code>classLoader</code>通过反射替换为自定义的classLoader FrameworkClassLoader.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>          <span class="token class-name">Object</span> mPackageInfo <span class="token operator">=</span> <span class="token class-name">ReflectionUtils</span><span class="token punctuation">.</span><span class="token function">getFieldValue</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span>                  <span class="token string">"mBase.mPackageInfo"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          frameworkClassLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FrameworkClassLoader</span><span class="token punctuation">(</span>                  ctx<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// set Application's classLoader to FrameworkClassLoader</span>          <span class="token class-name">ReflectionUtils</span><span class="token punctuation">.</span><span class="token function">setFieldValue</span><span class="token punctuation">(</span>mPackageInfo<span class="token punctuation">,</span> <span class="token string">"mClassLoader"</span><span class="token punctuation">,</span>                  frameworkClassLoader<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="加载插件"><a href="#加载插件" class="headerlink" title="加载插件"></a>加载插件</h2><ul><li><h3 id="生成PluginInfo-对象保存插件信息"><a href="#生成PluginInfo-对象保存插件信息" class="headerlink" title="生成PluginInfo 对象保存插件信息"></a>生成PluginInfo 对象保存插件信息</h3></li></ul><p>把生成的PluginInfo对象保存Map中缓存，记录当前加载的插件。这里保存PluginInfo时需要在调用插件的地方为插件传入一个id，如果id为null，则默认使用插件的包命作为插件id。</p><p>会同时保持在<code>pluginIdToInfoMap</code>，<code>pluginPkgToInfoMap</code> 两个map中，此处有冗余的嫌疑。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">PlugInfo</span> info <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PlugInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>info<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>pluginId <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> pluginApk<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> pluginId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>pluginPkgToInfoMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>plugInfo<span class="token punctuation">.</span><span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plugInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>pluginIdToInfoMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>plugInfo<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plugInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><h3 id="copy插件apk文件到dexInternalStoragePath目录下"><a href="#copy插件apk文件到dexInternalStoragePath目录下" class="headerlink" title="copy插件apk文件到dexInternalStoragePath目录下"></a>copy插件apk文件到<code>dexInternalStoragePath</code>目录下</h3></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">File</span> privateFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>dexInternalStoragePath<span class="token punctuation">,</span>        targetFileName <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> pluginApk<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> targetFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>info<span class="token punctuation">.</span><span class="token function">setFilePath</span><span class="token punctuation">(</span>privateFile<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pluginApk<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>privateFile<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">copyApkToPrivatePath</span><span class="token punctuation">(</span>pluginApk<span class="token punctuation">,</span> privateFile<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><h3 id="解析插件manifest-xml中的信息"><a href="#解析插件manifest-xml中的信息" class="headerlink" title="解析插件manifest.xml中的信息"></a>解析插件manifest.xml中的信息</h3></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> dexPath <span class="token operator">=</span> privateFile<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">PluginManifestUtil</span><span class="token punctuation">.</span><span class="token function">setManifestInfo</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> dexPath<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> 处理过程比较复杂，之后再分析</p><ul><li><h3 id="生成自定义ClassLoader备用"><a href="#生成自定义ClassLoader备用" class="headerlink" title="生成自定义ClassLoader备用"></a>生成自定义ClassLoader备用</h3></li></ul><p><code>PluginClassLoader</code>继承自<code>DexClassLoader</code>，以<code>FramworkClassLoader</code>作为parent ClassLoader，把生成的<code>pluginClassLoader</code>保存在<code>pluginInfo</code>中</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">PluginClassLoader</span> loader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PluginClassLoader</span><span class="token punctuation">(</span>dexPath<span class="token punctuation">,</span> dexOutputPath<span class="token punctuation">,</span> frameworkClassLoader<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>info<span class="token punctuation">.</span><span class="token function">setClassLoader</span><span class="token punctuation">(</span>loader<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>自定义的<code>PluginClassLoader</code>会在之后的<code>FrameworkClassLoader</code> <code>loadClass</code>时用到。</p><p><code>FrameworkClassLoader</code>的<code>loadClass</code>方法是Android PluginManager的核心方法，根据需要选择不同的classLoader来加载类文件。当需要加载插件中的类时，便委托给<code>PluginClassLoader</code>。</p><p><code>PluginClassLoader</code>由于继承自<code>DexClassLoader</code> ，所以可以直接加载apk中的类文件，从而实现插件化的能力。</p><ul><li><h3 id="修改AssetManager加载资源的位置"><a href="#修改AssetManager加载资源的位置" class="headerlink" title="修改AssetManager加载资源的位置"></a>修改AssetManager加载资源的位置</h3></li></ul><p>现在已经能加载apk中的类文件了，但是还不能直接访问apk中的资源文件。</p><p>平常通过<code>Context.getString()</code>、<code>Context.getDrawable()</code>访问res中的资源文件，其实是委托给<code>Resources</code>处理的，所以要使插件能正确读取资源文件，需要从<code>Resources</code>入手。</p><p>继续分析<code>Resources</code>，发现<code>Resources.getString()</code>、<code>Resources.getDrawable()</code>等又是委托给<code>AssetManager</code>的<code>getResourceValue()</code>方法读取res下的资源。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Drawable</span> <span class="token function">getDrawable</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Theme</span> theme<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NotFoundException</span> <span class="token punctuation">{</span>    <span class="token class-name">TypedValue</span> value<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment">// 通过getValue从res中读取数据</span>    <span class="token function">getValue</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 把typedValue中的数据转为Drawable</span>    <span class="token keyword">final</span> <span class="token class-name">Drawable</span> res <span class="token operator">=</span> <span class="token function">loadDrawable</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> id<span class="token punctuation">,</span> theme<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token class-name">TypedValue</span> outValue<span class="token punctuation">,</span> <span class="token keyword">boolean</span> resolveRefs<span class="token punctuation">)</span>        <span class="token keyword">throws</span> <span class="token class-name">NotFoundException</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment">// 委托给assetManager读取资源，把资源元数据保存在typedValue中</span>    mAssets<span class="token punctuation">.</span><span class="token function">getResourceValue</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> outValue<span class="token punctuation">,</span> resolveRefs<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>并且<code>Resources</code>对象是<code>ResourcesManager.getTopLevelResources()</code>通过<code>AssertManager</code>生成的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">              <span class="token keyword">public</span> <span class="token class-name">Resources</span> <span class="token function">getTopLevelResources</span><span class="token punctuation">(</span><span class="token class-name">String</span> resDir<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> splitResDirs<span class="token punctuation">,</span>           <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> overlayDirs<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> libDirs<span class="token punctuation">,</span> <span class="token keyword">int</span> displayId<span class="token punctuation">,</span>           <span class="token class-name">Configuration</span> overrideConfiguration<span class="token punctuation">,</span> <span class="token class-name">CompatibilityInfo</span> compatInfo<span class="token punctuation">,</span> <span class="token class-name">IBinder</span> token<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>      <span class="token class-name">AssetManager</span> assets <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AssetManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>resDir <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>assets<span class="token punctuation">.</span><span class="token function">addAssetPath</span><span class="token punctuation">(</span>resDir<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span>              <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>       r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Resources</span><span class="token punctuation">(</span>assets<span class="token punctuation">,</span> dm<span class="token punctuation">,</span> config<span class="token punctuation">,</span> compatInfo<span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>              <span class="token keyword">return</span> r<span class="token punctuation">;</span>｝<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以看起来只要搞定了<code>AssetManager</code>，就能顺利使插件访问到正确的资源文件了。</p><p>继续分析<code>AssetManager</code>，幸运的是<code>AssetManager</code>提供了一个<code>addAssetPath()</code>方法，可以直接读取zip文件中的资源。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Add an additional set of assets to the asset manager.  This can be * either a directory or ZIP file.  Not for use by applications.  Returns * the cookie of the added asset, or 0 on failure. * {@hide} */</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">addAssetPath</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token function">addAssetPathNative</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">makeStringBlocks</span><span class="token punctuation">(</span>mStringBlocks<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以我们把插件apk的路径添加到assetpath中，之后生成的代理activity就能访问到插件中的资源文件。</p><p>我们需要生成一个<code>AssetManager</code>，并把插件apk的路径添加进<code>AssetManager</code>中。</p><p><code>AssetManager</code>并不能直接new出来，<code>addAssetPath()</code>方法也不能直接方法，但是都可以同反射解决。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token class-name">AssetManager</span> am <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">AssetManager</span><span class="token punctuation">)</span> <span class="token class-name">AssetManager</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    am<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"addAssetPath"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>am<span class="token punctuation">,</span> dexPath<span class="token punctuation">)</span><span class="token punctuation">;</span>    info<span class="token punctuation">.</span><span class="token function">setAssetManager</span><span class="token punctuation">(</span>am<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Resources</span> ctxres <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Resources</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Resources</span><span class="token punctuation">(</span>am<span class="token punctuation">,</span> ctxres<span class="token punctuation">.</span><span class="token function">getDisplayMetrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            ctxres<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    info<span class="token punctuation">.</span><span class="token function">setResources</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样便可以访问插件中的资源了。</p><ul><li><h3 id="初始化插件的application"><a href="#初始化插件的application" class="headerlink" title="初始化插件的application"></a>初始化插件的application</h3></li></ul><p>同样是通过反射，用之前通过</p><pre class="line-numbers language-none"><code class="language-none">PluginManifestUtil.setManifestInfo(context, dexPath, info); <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>方法获取保存在<code>PlugInfo</code>里的插件Application类名，实例化插件的application。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ClassLoader</span> loader <span class="token operator">=</span> plugin<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> applicationClass <span class="token operator">=</span> loader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Application</span> application <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">)</span> applicationClass            <span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setApplicationBase</span><span class="token punctuation">(</span>plugin<span class="token punctuation">,</span> application<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// invoke plugin application's onCreate()</span>    application<span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">getStackTraceString</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实例化插件的Application后，并不能直接使用， 此时的Application Context还是宿主（Host）的Context，直接<code>getResources()</code>，<code>getFilesDir()</code>等获取到的还是宿主的。</p><p>需要用<code>PluginContextWrapper</code>替换掉插件Application中Context。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">PluginContextWrapper</span> ctxWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PluginContextWrapper</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span>         plugin<span class="token punctuation">)</span><span class="token punctuation">;</span> plugin<span class="token punctuation">.</span>appWrapper <span class="token operator">=</span> ctxWrapper<span class="token punctuation">;</span> <span class="token comment">// attach</span> <span class="token class-name">Method</span> attachMethod <span class="token operator">=</span> <span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span>         <span class="token string">"attach"</span><span class="token punctuation">,</span> <span class="token class-name">Context</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> attachMethod<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> attachMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>application<span class="token punctuation">,</span> ctxWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token keyword">instanceof</span> <span class="token class-name">Application</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>Build</span><span class="token punctuation">.</span>VERSION<span class="token punctuation">.</span>SDK_INT <span class="token operator">&gt;=</span> <span class="token number">14</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"registerComponentCallbacks"</span><span class="token punctuation">,</span>                 <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"android.content.ComponentCallbacks"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                 <span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> application<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ContextWrapper的原理和机制参考本文后的参考文章<a href="#%E5%8F%82%E8%80%83">[5]</a><a href="#%E5%8F%82%E8%80%83">[6]</a><a href="#%E5%8F%82%E8%80%83">[7]</a><a href="#%E5%8F%82%E8%80%83">[8]</a></p><ul><li><h3 id="加载目录下所有插件"><a href="#加载目录下所有插件" class="headerlink" title="加载目录下所有插件"></a>加载目录下所有插件</h3></li></ul><p>同加载单个插件的方法，只不过是遍历目录下的所有apk文件。</p><h2 id="启动插件中的MainActivity"><a href="#启动插件中的MainActivity" class="headerlink" title="启动插件中的MainActivity"></a>启动插件中的MainActivity</h2><p><code>startMainActivity()</code>中的事情比较简单，根据插件id或插件包名在之前缓存的Map中查找<code>PlugInfo</code>，通过<code>framwworkClassLoader</code>的<code>newActivityClassName()</code>方法缓存要启动的插件id及Activity类名，供<code>framwworkClassLoader</code>在loadClass时使用。</p><p>而<code>newActivityClassName()</code>方法本身只是返回一个名为<code>androidx.pluginmgr.PluginActivity</code>的代理Activity类名。</p><p>至于具体如何通过<code>androidx.pluginmgr.PluginActivity</code>加载到真正插件中的Activity，则是在<code>PluginClassLoader</code>中的<code>loadActivityClass</code>方法实现的，后面再具体分析。</p><h2 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h2><p>剩下一些删除插件、卸载插件的方法，以及一些方法的重载，就不赘述了。</p><p>本文是在学习Android pluginManager之余将做一些笔记备忘，刚开始研究插件，对其中难免有理解不正确的地方，欢迎大家留言指正，共同学习。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="http://www.trinea.cn/android/java-loader-common-class/">Java ClassLoader基础及加载不同依赖 Jar 中的公共类</a></li><li><a href="http://www.trinea.cn/android/android-plugin/">Android 插件化 动态升级</a></li><li><a href="http://blog.csdn.net/singwhatiwanna/article/details/39937639">APK动态加载框架（DL）解析</a></li><li><a href="http://codekk.com/open-source-project-analysis/detail/Android/FFish/DynamicLoadApk%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90">DynamicLoadApk 源码解析</a></li><li><a href="http://blog.csdn.net/canghai1129/article/details/41577901">Android与设计模式——装饰者(Decorator)模式</a></li><li><a href="http://blog.csdn.net/z1074971432/article/details/12561369">深入理解 Context</a></li><li><a href="http://blog.csdn.net/qinjuning/article/details/7310620">Android中Context详解 —- 你所不知道的Context</a></li><li><a href="http://blogs.360.cn/blog/proxydelegate-application/">Android的Proxy/Delegate Application框架</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 插件 </tag>
            
            <tag> 反射 </tag>
            
            <tag> ClassLoader </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图解javascript中的变量对象、闭包、作用域链机理</title>
      <link href="/2014/11/01/javascript-vo-closure-scopechain/"/>
      <url>/2014/11/01/javascript-vo-closure-scopechain/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包"></a>什么是闭包</h2><p><strong>javascript</strong>中的<strong>闭包</strong>是一个强大而灵活的武器，搞清<strong>闭包</strong>，<strong>作用域链</strong>的作用机理，能让我更好的将<strong>闭包</strong>运用在我们的项目中。</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Closures">mozilla开发者中心的定义：</a></p><blockquote><p>Closures are functions that refer to independent (free) variables. </p></blockquote><blockquote><p>In other words, the function defined in the closure ‘remembers’ the environment in which it was created. </p></blockquote><p>我理解的<strong>闭包</strong>是一个<strong>function</strong>，并且具有访问不在<strong>function</strong>内部定义的变量的能力，如嵌套<strong>function</strong>中的子<strong>function</strong>可以访问到定义在父<strong>function</strong>中的变量，是一类语言（如<strong>js</strong>）的特性。</p> <span id="more"></span><h2 id="闭包的应用"><a href="#闭包的应用" class="headerlink" title="闭包的应用"></a>闭包的应用</h2><p>看一个闭包在<strong>js</strong> for循环中经典的应用：</p><pre class="line-numbers language-none"><code class="language-none">function foo(){for(var i = 0; i&lt;10; i++){(function(j){setTimeout(function(){console.log( "current i:" + j + "--" + new Date().getSeconds() + "s" );}, j * 1000);})(i);    }}foo();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码改自<em>Pro JavaScript Techniques</em> 中用js控制css达到动画效果的部分。动画的高度/透明度是根据索引<code>i</code>的值动态设置的，所以我们需要将这个索引<code>i</code>保存下来。</p><h2 id="闭包的错误使用"><a href="#闭包的错误使用" class="headerlink" title="闭包的错误使用"></a>闭包的错误使用</h2><p>这里就有一个问题，为什么我们写成下面的代码就不能得到正确的索引呢？</p><pre class="line-numbers language-none"><code class="language-none">function foo(){for(var i = 0; i&lt;10; i++){setTimeout(function(){console.log("current i:"+i+"--"+new Date().getSeconds()+"s");     //这里也用到了闭包},i*1000);    }}foo();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码得到的<code>i</code>始终是<strong>10</strong>，而不是想要的<strong>1</strong>,<strong>2</strong>,<strong>3</strong>…</p><p>现在我们来逐步详细分析原因:</p><ul><li><ol><li>进入<strong>foo</strong>的<strong>execution context</strong>阶段：</li></ol></li></ul><p>这时创建<strong>foo</strong>的<strong>Variable Object (VO)</strong>/<strong>Activation Object (AO）</strong></p><pre><code>    VO(foo) = {          i: undefined,    };</code></pre><ul><li><ol start="2"><li>foo代码执行阶段：</li></ol></li></ul><p>将<strong>fooExecutionContext</strong> push进<strong>Execution Context Stack</strong> 中，<code>i</code>随着循环被修改为相应的数值。</p><pre><code>    executionContextStack.push(fooExecutionContext);    executionContextStack = [         &lt;foo&gt; functionContext,        globalContext    ]</code></pre><p>由于在<code>for</code>循环执行的时候，<code>setTimeout</code>内部的匿名函数的<strong>execution context</strong>对于<strong>foo</strong>来说是不可见的，因为这时的匿名函数并没有执行， 不能访问、修改该匿名函数内部的变量，所以匿名函数中的<code>i</code>不会被修改为<code>for</code>循环的当前索引。 但是该匿名函数的<strong>Variable Object (VO)</strong>/<strong>Activation Object (AO)<strong>已经创建，并且保存了<code>i</code>的</strong>引用</strong>。</p><p><code>for</code>循环结束时<code>i</code>值为<strong>10</strong>， 正是由于匿名函数的<strong>VO</strong>/<strong>AO</strong>保存了<code>i</code>的<strong>引用</strong>，<strong>foo</strong>运行结束时，<strong>Garbage Collector</strong>不会销毁<strong>foo</strong>的<strong>VO</strong>/<strong>AO</strong>(上面保存着<code>i=10</code>),所以当<code>setTimeout</code>内的匿名函数运行时，<code>i</code>的值始终为<strong>10</strong>。</p><p>搞清楚了上面的问题后，现在我们用图来解释开始的例子。</p><p><img src="/img/javascript_scopechain_pic_1.png" alt="图1"></p><p>上面的图是foo在执行最后一次循环时的运行机理。</p><p><img src="/img/javascript_scopechain_pic_2.png" alt="图2"></p><p>图2是<code>setTimeout</code>内部匿名函数执行时的机理，其中红颜色框起来部分随每个<code>setTimeout</code>内部匿名函数的不同而不同。</p><p>通过上面两副图我们可以清楚的看到，增加的匿名自执行函数的作用就是将<code>for</code>循环的索引作为自己的局部变量保存起来，这样<code>setTimeout</code>里面的匿名函数就可以通过<strong>scope chain</strong>访问到正确的索引值了。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://dmitrysoshnikov.com/ecmascript/javascript-the-core/">http://dmitrysoshnikov.com/ecmascript/javascript-the-core/</a></p><p><a href="http://dmitrysoshnikov.com/ecmascript/chapter-1-execution-contexts/">http://dmitrysoshnikov.com/ecmascript/chapter-1-execution-contexts/</a></p><p><a href="http://dmitrysoshnikov.com/ecmascript/chapter-2-variable-object/">http://dmitrysoshnikov.com/ecmascript/chapter-2-variable-object/</a></p><p><a href="http://dmitrysoshnikov.com/ecmascript/chapter-4-scope-chain/">http://dmitrysoshnikov.com/ecmascript/chapter-4-scope-chain/</a></p><p>迁移自旧博客<a href="http://lwn.iteye.com/blog/1604548">懒蜗牛</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vo </tag>
            
            <tag> closure </tag>
            
            <tag> scopechain </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>android不同系统版本sd的挂载方式</title>
      <link href="/2014/10/31/android-sdcard-mounting-method/"/>
      <url>/2014/10/31/android-sdcard-mounting-method/</url>
      
        <content type="html"><![CDATA[<h2 id="2-x系统"><a href="#2-x系统" class="headerlink" title="2.x系统"></a>2.x系统</h2><p>sd卡实际挂载位置</p><pre><code>    /mnt/sdcard </code></pre><p>并建立了一个/sdcard的软链接指向/mnt/sdcard</p><pre><code>    /sdcard/  --&gt; /mnt/sdcard</code></pre><p><strong>Android 2.2之后的版本允许将应用程序安装于SD卡</strong></p><p>当SD卡挂载于手机时，<code>/mnt/sdcard/.android_secure</code> 目录会被映射到<code>/mnt/asec</code> 目录和 <code>/mnt/secure</code> 目录。其中<code>/mnt/asec</code> 目录中主要是程序的安装目录，包括其执行文件和lib文件等；而<code>/mnt/secure</code> 目录中就存放程序加密后的档案。也就是说，在<code>/mnt</code>路径下看到的<code>/mnt/asec</code>目录和<code>/mnt/secure</code>目录并不是真正存在在手机内存里的，它们只是<code>/mnt/sdcard/.android_secure</code>目录的一个影像而已。也就是说<code>/mnt/sdcard/.android_secure</code> =<code>/mnt/secure</code> +<code>/mnt/asec</code></p> <span id="more"></span><h2 id="4-1-系统"><a href="#4-1-系统" class="headerlink" title="4.1 系统"></a>4.1 系统</h2><ul><li><p>有外置sd卡时，实际挂载位置：</p><pre><code>  /storage/sdcard0  sdcard_r 组</code></pre><p>  为了兼容2.x系统app，使旧的app能正确认出sd卡，将2.x时代的sd卡路径映射到<code>/storage/sdcard0</code>上</p><pre><code>  /mnt/sdcard --&gt; /storage/sdcard0  system组  /sdcard/ --&gt; /storage/sdcard0  root组</code></pre></li><li><p>无外置sd卡时，将内部存储空间划分一部分，虚拟为sd卡挂载在：</p><pre><code>  /storage/sdcard0  sdcard_rw组  // 兼容2.x系统app  /mnt/sdcard --&gt;  /storage/sdcard0 root组  /sdcard/ --&gt; /storage/sdcard0  root组</code></pre></li></ul><h2 id="4-4-2-系统"><a href="#4-4-2-系统" class="headerlink" title="4.4.2 系统"></a>4.4.2 系统</h2><p>sd卡实际挂载位置</p><pre><code>    /mnt/shell/emulate/0</code></pre><p>兼容2.x系统app，google居然将以前的sd卡挂载路径称为<a href="http://translate.google.cn/?hl=en#en/zh-CN/legacy">legacy</a>，可见对历史包袱也是很头疼</p><pre><code>    /storage/emulated/legacy  --&gt; /mnt/shell/emulate/0    /mnt/sdcard --&gt; /storage/emulated/legacy    /sdcard --&gt; /storage/emulated/legacy    /storage/sdcard0 --&gt; /storage/emulated/legacy</code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://stackoverflow.com/questions/23625104/storage-emulated-legacy-vs-storage-emulated-0-vs-data-data-myapp">http://stackoverflow.com/questions/23625104/storage-emulated-legacy-vs-storage-emulated-0-vs-data-data-myapp</a><br><a href="http://www.miui.com/thread-863099-1-1.html">http://www.miui.com/thread-863099-1-1.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sdcard </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对javascript中的Variable Object的理解</title>
      <link href="/2014/10/31/javascript-variable-object/"/>
      <url>/2014/10/31/javascript-variable-object/</url>
      
        <content type="html"><![CDATA[<h2 id="Variable-Object"><a href="#Variable-Object" class="headerlink" title="Variable Object"></a>Variable Object</h2><p>在<strong>ECMAScipt</strong>中，通过变量对象<strong>Variable Object (VO)<strong>机制来存贮、访问变量variables。</strong>VO</strong>中包含了：</p><h3 id="1-variables-通过var-声明的变量"><a href="#1-variables-通过var-声明的变量" class="headerlink" title="1.  variables (通过var 声明的变量)"></a>1.  variables (通过var 声明的变量)</h3><h3 id="2-function-declaration-函数声明"><a href="#2-function-declaration-函数声明" class="headerlink" title="2.  function declaration (函数声明)"></a>2.  function declaration (函数声明)</h3><h3 id="3-function-formal-parameters-函数行参"><a href="#3-function-formal-parameters-函数行参" class="headerlink" title="3.  function formal parameters (函数行参)"></a>3.  function formal parameters (函数行参)</h3><p><strong>注</strong>： 不包括function expression (函数表达式)。</p> <span id="more"></span><p><strong>Variable Object</strong>在<strong>Global Context</strong>中等同于<strong>Global Object</strong>，在<strong>Function Context</strong>中称为<strong>Activation Object (AO)<strong>，<br>一般来讲，</strong>Variable Object</strong> / <strong>Activation Object</strong> 我们不能直接在外部访问到。</p><p>要访问某个变量<strong>x</strong>，首先在<strong>x</strong>所在<strong>Function Context</strong>中的<strong>Variable Object</strong>中查找，<br>若找不到，则在<strong>x</strong>所属<strong>function</strong>的<strong>[[scope]]<strong>属性中保存的</strong>scope chain</strong>中，<br>逐级向上查找，直至查找到<strong>Global Object</strong>，如果仍未找到则返回 <strong>x</strong> is not defined 。</p><p>我们所常见的<code>window</code>对象实际上是<strong>Global Object</strong>的引用，所以通过<code>var</code>在<strong>Global Context</strong>中声明的变量<strong>x</strong>，<br>可以通过<strong>x</strong>直接访问，也可通过<code>window.x</code>来间接访问，并且<a href="http://www.cnblogs.com/TomXu/archive/2012/01/16/2309728.html#2296024">通过<code>window.x</code>访问比直接访问要慢</a> 。</p><pre><code>    var a = "variable";    b = "property";    console.log(window.a);  // "variable"    console.log(window.b); // "property"    delete window.a;  // false    console.log(window.a); // "variable"    delete window.b; //true    console.log(window.b);  //undefined;</code></pre><p>在上面的例子中， 虽然都能通过<code>window.a</code>, <code>window.b</code>的形式来访问，看似都是<code>window</code>的属性，但是实质是不同的。</p><p>不使用<code>var</code>声明的”变量“，实际不是真正的变量，而是<strong>Global Object</strong>的属性，可以通过<strong>delete</strong> 关键字删除，而真正的变量拥有<code>DontDelete</code>属性，不能通过<code>delete</code>删除。</p><p>但值得注意的是，在firebug中，执行</p><pre><code>    delete window.a;  //true    delete window.b;  //true</code></pre><p>返回值都是<strong>true</strong>，这是由于在eval context中，变量不会被添加<code>DontDelete</code>属性，firebug正是利用eval来执行我们在console中的代码，而在chrome，opera的console中则返回正确的<strong>false</strong>,<strong>true</strong></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://dmitrysoshnikov.com/ecmascript/chapter-2-variable-object/">http://dmitrysoshnikov.com/ecmascript/chapter-2-variable-object</a></p><p>迁移自旧博客<a href="http://lwn.iteye.com/blog/1602643">懒蜗牛</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> vo </tag>
            
            <tag> scope chain </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>canvas、bitmap、paint之间是什么关系</title>
      <link href="/2014/04/12/canvas/"/>
      <url>/2014/04/12/canvas/</url>
      
        <content type="html"><![CDATA[<p><a href="http://developer.android.com/reference/android/graphics/Canvas.html">官方文档</a>翻译过来的解释：</p><p>要绘图，需要4个基本组件:</p><ul><li>Bitmap 保存像素的容器</li><li>Canvas 执行绘图命令的宿主</li><li>Rect/Path/text/Bitmap 要绘制的元素</li><li>Paint 用什么样的方式绘制</li></ul><p>android的<strong>canvas</strong>绘图，基于<strong>skia</strong>，想要了解<strong>canvas</strong>的绘图过程，需要对<strong>canvas</strong>和<strong>skia</strong>的源码有所了解。</p><p>查看Canvas源码，发现Canvas与Bitmap类似，都是对其native方法进行了封装。</p> <span id="more"></span><p>真正起绘图作用的是<code>mNativeCanvas</code>，保存有**nativeCanvas(SkCanvas)**的指针。</p><p><code>mNativeCanvas</code>注释上指明</p><blockquote><p> assigned in constructors or setBitmap, freed in finalizer</p></blockquote><p>说明<code>mNativeCanvas(SkCanvas)</code>是在构造函数、或者<code>setBitmap</code>时分配的。</p><p>继续查看源码，发现<code>mNativeCanvas</code>是调用<strong>native</strong>方法</p><pre><code>initRaster(int nativeBitmapOrZero)</code></pre><p>方法生成。</p><p><code>initRaster</code>中的参数就是Canvas私有属性<code>mBitmap</code>的**nativeBitmap(SkBitmap)**的指针。</p><p>查看*frameworks/base/core/jni/android/graphics/*下的Canvas.cpp文件，</p><pre><code>static SkCanvas* initRaster(JNIEnv* env, jobject, SkBitmap* bitmap) {        return bitmap ? new SkCanvas(*bitmap) : new SkCanvas;}</code></pre><p>发现如果指定了<strong>SkBitmap</strong>，<code>initRaster</code>会以指定的<strong>SkBitmap</strong>生成<strong>SkCanvas</strong>；</p><p>反之会生成默认的<strong>SkCanvas</strong>。</p><p>继续查看*android/external/skia/src/core/*下SkCanvas的源码，</p><p>默认构造函数</p><pre><code>SkCanvas::SkCanvas(): fMCStack(sizeof(MCRec), fMCRecStorage, sizeof(fMCRecStorage)) {    inc_canvas();        this-&gt;init(NULL);}</code></pre><p><code>init</code>方法调用<code>setDevice</code>方法，生成默认的<strong>SkDevice</strong>，而<strong>SkDeveice</strong>最终会生成默认的<strong>SkBitmap</strong></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><p>Canvas的属性<code>mNativeCanvas(SkCanvas)</code>是根据<code>mBitmap</code>生成的，如果<code>mBitmap</code>不为空，</p><p>则<code>mNativeCanvas</code>操作/修改的<strong>SkBitmap</strong>就是<code>mBitmap</code>；</p><p>否则会操作/修改<code>mNativeCanvas</code>自己的<strong>SkBitmap</strong>.</p></li><li><p>Canvas最终操作/修改的内存还是**Bitmap(SkBitmap)**中的数据.</p></li><li><p><code>Canvas(bitmap)</code> 与 <code>canvas.setBitmap(bitmap)</code>中的<strong>bitmap</strong>是Canvas的<code>mBitmap</code>，直接操作/修改的对象。</p><p><code>canvas.drawBitmap(bitmap)</code>中的<strong>bitmap</strong>是源<strong>bitmap</strong>，draw时，不对源<strong>bitmap</strong>进行写操作，</p><p>而是写入到<code>mBitmap</code>或<code>mNativeCanvas</code>自己的<strong>SkBitmap</strong>中。</p></li><li><p>源码中指明Canvas最大绘图大小为<strong>32766 * 32766</strong>。超过这个大小会直接报错。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> canvas </tag>
            
            <tag> bitmap </tag>
            
            <tag> paint </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Drawable小研究</title>
      <link href="/2014/04/12/drawable/"/>
      <url>/2014/04/12/drawable/</url>
      
        <content type="html"><![CDATA[<p>Drawable，官方给出的解释是“<em>something that can be drawn</em>”，翻译过来就是可以被画的东西。</p><p>官方把“可以被画的东西”分为了7种形式:</p><ul><li><p><a href="../../11/bitmap">Bitmap</a> 最简单的“可以被画的东西”，可能是png，或jpg</p></li><li><p><strong>Nine Patch</strong> 俗称“.9”图，android自己扩展的一种png格式，可以自定义图像拉伸的信息</p></li><li><p><strong>Shape</strong> 用简单的绘图指令生成图片。如画矩形、圆形</p></li><li><p><strong>Layers</strong> 多个Drawable，按照层叠顺序组成的Drawable</p></li><li><p><strong>States</strong> Drawable的状态，如“focused”, “pressed”等</p></li><li><p><strong>Levels</strong> 可以更改level的Drawable，如进度条，电池进度</p></li><li><p><strong>Scale</strong> 可缩放的Drawable</p></li></ul> <span id="more"></span><p>Drawable是所有XDrawable的父类，子类有AnimationDrawable、BitmapDrawable、ClipDrawable、<br>GradientDrawable、InsetDrawable、LayerDrawable、LevelListDrawable、NinePathDrawable、<br>PaintDrawable、PictureDrawble、RotateDrawable、ScaleDrawable、ShapeDrawable、StateListDrawable、<br>TransitionDrawable。</p><p><strong>所以，Drawable是对一类“可以被画”的事物的抽象，Bitmap是7种形式Drawable的其中一种，BitmapDrawable是对Bitmap封装的具体Drawable。</strong></p><p>Drawable定义了抽象方法<code>draw(Canvas)</code>，各子类根据自己具体特征，实现不同的draw方法。</p><p>Drawable可以通过静态方法<code>creatFromResourceStream</code>创建Bitmap，之后包装为BitmapDrawable，</p><p>也可以通过<code>createFromXmlInner</code>工厂方法，根据xml文件内容创建具体的Drawable子类。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bitmap </tag>
            
            <tag> drawable </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android Bitmap的一点研究</title>
      <link href="/2014/04/10/bitmap/"/>
      <url>/2014/04/10/bitmap/</url>
      
        <content type="html"><![CDATA[<p>android中的<strong>Bitmap</strong>与其他对象不同，不能通过<code>new Bitmap()</code>直接实例化.</p><p>查看源码，<strong>Bitmap</strong>的构造函数是<em>default</em>的，仅包内可见，实际是供<strong>native</strong>方法调用的。</p><p><strong>Bitmap</strong>中实际保存数据的地方在<strong>native</strong>层，<strong>java</strong>层仅对<strong>native</strong>层方法进行封装、重载，</p><p>并提供一些状态的判断方法、属性的<code>set</code>、<code>get</code>方法。</p><p><strong>Bitmap</strong>有<code>mNativaBitmap</code>属性，用来保存<code>nativeBitmap</code>的地址。</p><p><code>mNativeBitmap</code>的地址在构造<strong>Bitmap</strong>时，由<strong>native</strong>方法直接传递进来。</p><p>####所以整个<strong>Bitmap</strong>可以认为在<strong>java</strong>层基本不怎么占内存，大部分内存占用都是在<strong>native</strong>层。</p> <span id="more"></span><h3 id="Bitmap自身提供了三类创建Bitmap的静态方法："><a href="#Bitmap自身提供了三类创建Bitmap的静态方法：" class="headerlink" title="Bitmap自身提供了三类创建Bitmap的静态方法："></a><strong>Bitmap</strong>自身提供了三类创建<strong>Bitmap</strong>的静态方法：</h3><h4 id="1-根据传入的colors数组，生成bitmap，colors数组就是每个像素点的颜色值ARGB"><a href="#1-根据传入的colors数组，生成bitmap，colors数组就是每个像素点的颜色值ARGB" class="headerlink" title="1. 根据传入的colors数组，生成bitmap，colors数组就是每个像素点的颜色值ARGB"></a>1. 根据传入的<code>colors</code>数组，生成<code>bitmap</code>，<code>colors</code>数组就是每个像素点的颜色值ARGB</h4><pre><code>createBitmap(int colors[], int offset, int stride, int width, int height, Config config);</code></pre><p>最终调用<strong>native</strong>方法</p><pre><code>nativeCreate(int[] colors, int offset, int stride, int width. int height, int config.nativeInt, boolean false)</code></pre><p>生成新的<strong>Bitmap</strong></p><h4 id="2-生成指定大小的空白Bitmap"><a href="#2-生成指定大小的空白Bitmap" class="headerlink" title="2.  生成指定大小的空白Bitmap"></a>2.  生成指定大小的空白<strong>Bitmap</strong></h4><pre><code>createBitmap(int width, int height, Config config)</code></pre><p>同样最终会调用</p><pre><code>nativeCreate(int[] colors, int offset, int stride, int width. int height, int config.nativeInt, boolean false)</code></pre><p>不过其中<code>color</code>数组为<code>null</code></p><h4 id="3-从源Bitmap中截取一部分，生成新的Bitmap，不对源bitmap修改"><a href="#3-从源Bitmap中截取一部分，生成新的Bitmap，不对源bitmap修改" class="headerlink" title="3.  从源Bitmap中截取一部分，生成新的Bitmap，不对源bitmap修改"></a>3.  从源Bitmap中截取一部分，生成新的Bitmap，不对源bitmap修改</h4><p>具体实现分两部分：</p><p>调用方法<strong>（2）</strong>生成新的空白bitmap</p><p>new 一个Canvas，将新生成的bitmap set到canvas里，通过canvas对bitmap进行裁剪等处理，然后返回bitmap</p><pre><code>Canvas canvas = new Canvas();canvas.setBitmap(bitmap);canvas.drawBitmap(sourceBitmap, srcRect, dstRectF, paint);canvas.setBitmap(null);  //将临时的canvas中的mBitmap置空，防止canvas拥有bitmap引用，无法被GC回收</code></pre>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> canvas </tag>
            
            <tag> bitmap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在android上抓包</title>
      <link href="/2014/03/20/how-to-view-network-requests-on-android/"/>
      <url>/2014/03/20/how-to-view-network-requests-on-android/</url>
      
        <content type="html"><![CDATA[<h2 id="用Charles"><a href="#用Charles" class="headerlink" title="用Charles"></a>用Charles</h2><p><strong>android4.0以上的系统，wifi环境下支持设置网络代理。</strong></p><ul><li><p>安装<a href="http://www.charlesproxy.com/">Charles</a></p></li><li><p>打开Charles，在<code>proxy</code>–&gt;<code>proxy settings</code>–&gt;<code>proxies</code>中设置要监听的端口号，一般为<strong>8080</strong></p></li><li><p>查看本机ip，</p><pre><code>  $ ifconfig</code></pre></li><li><p>记住本机的ip地址，如<strong>222.11.22.11</strong></p></li><li><p>将android手机连上wifi，确保与电脑处于<strong>同一</strong>ip段。</p></li><li><p>一般在wifi连接的<strong>高级设置</strong>里可以找到<strong>代理设置</strong>，将代理设置改为<strong>手动</strong>，<br>填入刚才记下的ip地址，以及Charles里设置的端口号<strong>8080</strong>，保存后退出。<br>现在手机的网络请求都会被转发到Charles上。</p><span id="more"></span><p>  <img src="/img/charles.png" alt="charles"></p></li></ul><p> 这种方法只适合于抓去android4.0以上系统，wifi环境的网络请求。</p><p> 对于android2.x的系统，系统没有提供设置代理的方法。</p><p> 或者，我们需要查看 <em>2g</em> / <em>3g</em> / <em>4g</em> 的网络请求，用Chalers就无能为力了。</p><hr><h2 id="用tcpdump结合wireshark"><a href="#用tcpdump结合wireshark" class="headerlink" title="用tcpdump结合wireshark"></a>用tcpdump结合wireshark</h2><p><strong>前提是手机要root过</strong></p><p> <a href="http://www.tcpdump.org/">tcpdump</a>是一个开源跨平台的网络数据采集分析工具。</p><p> 详细用法参见<a href="http://www.cnblogs.com/ggjucheng/archive/2012/01/14/2322659.html">ggjucheng</a>的博客。</p><ul><li><p>首先下载<a href="http://www.strazzere.com/android/tcpdump">tcpdump</a></p></li><li><p>将<strong>tcpdump</strong> push到手机sd卡上</p><pre><code>  $ adb push ./tcpdump /sdcard/tcpdump</code></pre></li><li><p>用<strong>rootExplorer</strong>将<strong>tcpdump</strong>复制到*/system/xbin*目录下</p></li><li><p>获取root权限</p><pre><code>  $ adb shell  $ su</code></pre></li><li><p>给<strong>tcpdump</strong>加上权限</p><pre><code>  $ chmod 777 /system/xbin/tcpdump</code></pre></li><li><p>然后就是执行<strong>tcpdump</strong>开始抓包了</p><pre><code>  $ tcpdump -p -vv -s 0 -w /sdcard/cap.pcap</code></pre></li><li><p>等收集到足够的数据包后<strong>ctrl + c</strong>停止抓包</p></li><li><p>把收集到的数据pull到本地</p><pre><code>  $ adb pull /sdcard/cap.pcap ./</code></pre></li><li><p>用<strong>wireshark</strong>打开<strong>pcap</strong>文件</p><p>  <img src="/img/wireshark.png" alt="wireshark"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tcpdump </tag>
            
            <tag> 抓包 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
